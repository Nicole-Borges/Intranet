{"version":3,"file":"static/js/4882.2ee93c7c.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/usePlaceholder.js","../node_modules/react-bootstrap/esm/PlaceholderButton.js","../node_modules/react-bootstrap/esm/Placeholder.js","pages/uikit/Placeholders.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { useCol } from './Col';\nexport default function usePlaceholder({\n  animation,\n  bg,\n  bsPrefix,\n  size,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'placeholder');\n  const [{\n    className,\n    ...colProps\n  }] = useCol(props);\n  return { ...colProps,\n    className: classNames(className, animation ? `${bsPrefix}-${animation}` : bsPrefix, size && `${bsPrefix}-${size}`, bg && `bg-${bg}`)\n  };\n}","import * as React from 'react';\nimport Button from './Button';\nimport usePlaceholder from './usePlaceholder';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PlaceholderButton = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const placeholderProps = usePlaceholder(props);\n  return /*#__PURE__*/_jsx(Button, { ...placeholderProps,\n    ref: ref,\n    disabled: true,\n    tabIndex: -1\n  });\n});\nPlaceholderButton.displayName = 'PlaceholderButton';\nexport default PlaceholderButton;","import * as React from 'react';\nimport usePlaceholder from './usePlaceholder';\nimport PlaceholderButton from './PlaceholderButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Placeholder = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const placeholderProps = usePlaceholder(props);\n  return /*#__PURE__*/_jsx(Component, { ...placeholderProps,\n    ref: ref\n  });\n});\nPlaceholder.displayName = 'Placeholder';\nexport default Object.assign(Placeholder, {\n  Button: PlaceholderButton\n});","import { Row, Col, Card, Placeholder, Button } from 'react-bootstrap';\r\nimport { PageTitle } from 'components';\r\n\r\n// images\r\nimport img1 from 'assets/images/small/small-1.jpg';\r\nimport img2 from 'assets/images/small/small-2.jpg';\r\n\r\nconst BasicPlaceholders = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Placeholders</h4>\r\n                <p className=\"text-muted font-13\">\r\n                    In the example below, we take a typical card component and recreate it with placeholders applied to\r\n                    create a “loading card”. Size and proportions are the same between the two.\r\n                </p>\r\n\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <Card className=\"border shadow-none\">\r\n                            <Card.Img variant=\"top\" src={img1} />\r\n                            <Card.Body>\r\n                                <Card.Title>Card Title</Card.Title>\r\n                                <Card.Text>\r\n                                    Some quick example text to build on the card title and make up the bulk of the\r\n                                    card's content.\r\n                                </Card.Text>\r\n                                <Button>Go somewhere</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <Card className=\"border shadow-none mb-0\">\r\n                            <Card.Img variant=\"top\" src={img2} />\r\n                            <Card.Body>\r\n                                <Placeholder as={Card.Title} animation=\"glow\">\r\n                                    <Placeholder xs={6} />\r\n                                </Placeholder>\r\n                                <Placeholder as={Card.Text} animation=\"glow\">\r\n                                    <Placeholder xs={7} /> <Placeholder xs={4} /> <Placeholder xs={4} />{' '}\r\n                                    <Placeholder xs={6} /> <Placeholder xs={8} />\r\n                                </Placeholder>\r\n                                <Placeholder.Button variant=\"primary\" xs={6} />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst PlaceholdersWithVariants = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Color</h4>\r\n                <p className=\"text-muted font-13\">\r\n                    By default, the <code>placeholder</code> uses <code>currentColor</code>. This can be overriden with\r\n                    a custom color or utility class.\r\n                </p>\r\n\r\n                <Placeholder xs={12} />\r\n\r\n                <Placeholder xs={12} bg=\"primary\" />\r\n                <Placeholder xs={12} bg=\"secondary\" />\r\n                <Placeholder xs={12} bg=\"success\" />\r\n                <Placeholder xs={12} bg=\"danger\" />\r\n                <Placeholder xs={12} bg=\"warning\" />\r\n                <Placeholder xs={12} bg=\"info\" />\r\n                <Placeholder xs={12} bg=\"light\" />\r\n                <Placeholder xs={12} bg=\"dark\" />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst PlaceholdersWidth = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Width</h4>\r\n                <p className=\"text-muted font-13\">\r\n                    You can change the <code>width</code> through grid column classes, width utilities, or inline\r\n                    styles.\r\n                </p>\r\n                <Placeholder xs={6} />\r\n                <Placeholder className=\"w-75\" /> <br />\r\n                <Placeholder style={{ width: '25%' }} />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst PlaceholdersWithSizes = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Sizing</h4>\r\n                <p className=\"text-muted font-13\">\r\n                    The size of <code>placeholder</code>s are based on the typographic style of the parent element.\r\n                    Customize them with sizing props: <code>lg</code>, <code>sm</code>, or <code>xs</code>.\r\n                </p>\r\n\r\n                <Placeholder xs={12} size=\"lg\" />\r\n                <Placeholder xs={12} />\r\n                <Placeholder xs={12} size=\"sm\" />\r\n                <Placeholder xs={12} size=\"xs\" />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst PlaceholdersConcept = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">How it works</h4>\r\n                <p className=\"text-muted font-13\">\r\n                    Create placeholders with the <code>Placeholder</code> component and a grid column prop (e.g.,{' '}\r\n                    <code>xs={6}</code>) to set the <code>width</code>. They can replace the text inside an element or\r\n                    be added to an existing component via the <code>as</code> prop.\r\n                </p>\r\n\r\n                <p aria-hidden=\"true\">\r\n                    <Placeholder xs={6} />\r\n                </p>\r\n\r\n                <Placeholder.Button xs={4} aria-hidden=\"true\" />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst PlaceholdersAnimation = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Animation</h4>\r\n                <p className=\"text-muted font-13\">\r\n                    Animate placeholders by setting the prop <code>animation</code> to <code>glow</code> or{' '}\r\n                    <code>wave</code> to better convey the perception of something being <em>actively</em> loaded.\r\n                </p>\r\n\r\n                <Placeholder as=\"p\" animation=\"glow\">\r\n                    <Placeholder xs={12} />\r\n                </Placeholder>\r\n                <Placeholder as=\"p\" animation=\"wave\" className=\"mb-0\">\r\n                    <Placeholder xs={12} />\r\n                </Placeholder>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Placeholders = () => {\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Base UI', path: '/ui/offcanvas' },\r\n                    { label: 'Placeholders', path: '/ui/Placeholders', active: true },\r\n                ]}\r\n                title={'Placeholders'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <BasicPlaceholders />\r\n                    <PlaceholdersWidth />\r\n                    <PlaceholdersAnimation />\r\n                </Col>\r\n                <Col xl={6}>\r\n                    <PlaceholdersWithVariants />\r\n                    <PlaceholdersConcept />\r\n                    <PlaceholdersWithSizes />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Placeholders;\r\n"],"names":["usePlaceholder","animation","bg","bsPrefix","size","props","useBootstrapPrefix","useCol","className","colProps","classNames","PlaceholderButton","React","ref","placeholderProps","_jsx","Button","disabled","tabIndex","displayName","Placeholder","as","Component","Object","assign","BasicPlaceholders","Card","Row","Col","md","variant","src","img1","img2","xs","PlaceholdersWithVariants","PlaceholdersWidth","style","width","PlaceholdersWithSizes","PlaceholdersConcept","PlaceholdersAnimation","breadCrumbItems","label","path","active","title","xl"],"sourceRoot":""}
{"version":3,"file":"static/js/426.df495c7f.chunk.js","mappings":"2QAMMA,EAAS,CAAC,UAAW,YAAa,UAAW,SAAU,UAAW,OAAQ,QAAS,QAEnFC,EAAgB,WAClB,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIC,UAAU,eAAd,4BACA,cAAGA,UAAU,0BAAb,2NAKA,qEAEI,yCAFJ,8BAGI,6CAHJ,qCAII,qCAJJ,MAIyB,8CAGxBF,EAAOG,KAAI,SAACC,EAAOC,GAChB,OACI,UAAC,IAAD,CACIC,QAASF,EAETF,UAAWK,GAAAA,CAAqB,UAAVH,EAAoB,YAAc,QAAUA,GAHtE,WAKI,8BAASA,EAAT,SALJ,aAK0CA,EAL1C,8BAESC,EAAMG,qBAYjCC,EAAoB,WACtB,OAA4BC,EAAAA,EAAAA,UAAmB,CAC3C,UACA,YACA,UACA,SACA,UACA,OACA,QACA,SARJ,eAAOV,EAAP,KAAeW,EAAf,KAoBA,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIT,UAAU,eAAd,gCACA,eAAGA,UAAU,0BAAb,2CACiC,iDADjC,iFAEyC,yCAFzC,cAKCF,EAAOG,KAAI,SAACC,EAAOC,GAChB,OACI,UAAC,IAAD,CACIC,QAAQ,GACRJ,UAAWK,GAAAA,CAAW,MAAQH,EAAiB,UAAVA,EAAoB,YAAc,aAAc,CACjF,aAAc,CAAC,OAAQ,aAAaQ,SAASR,KAGjDS,QAAS,kBAvBb,SAACR,GACjB,IAAMS,GAAI,OAAOd,GACjBc,EAAKC,OAAOV,EAAO,GACnBM,EAAUG,GAoByBE,CAAYX,IAC3BY,aAAW,EAPf,WASI,8BAASb,EAAT,SATJ,aAS0CA,EAT1C,8BAKSC,EAAMG,qBAajCU,EAAiB,WACnB,OAAiBR,EAAAA,EAAAA,UAAmB,CAAC,UAAW,SAAU,UAAW,SAA9DV,GAAP,eAEMmB,EAAkB,CAAC,sBAAuB,kBAAmB,oBAAqB,yBAExF,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIjB,UAAU,eAAd,gCACA,cAAGA,UAAU,qBAAb,8GAICF,EAAOG,KAAI,SAACC,EAAOC,GAChB,OACI,UAAC,IAAD,CAAOC,QAASF,EAAhB,WACI,cAAGF,UAAWK,GAAAA,CAAWY,EAAMd,GAAQ,UAD3C,aACiE,4BAASD,IAD1E,2BAA4BC,EAAMG,qBAWpDY,EAAwB,WAC1B,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIlB,UAAU,eAAd,iCACA,cAAGA,UAAU,qBAAb,uGAIA,UAAC,IAAD,CAAOI,QAAQ,UAAf,WACI,eAAIJ,UAAU,gBAAd,yBACA,0NAIA,mBACA,cAAGA,UAAU,OAAb,0GASdmB,EAAe,WACjB,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAInB,UAAU,eAAd,4BACA,eAAGA,UAAU,qBAAb,kGAC0F,KACtF,wCAFJ,UAEgC,sCAFhC,WAE2D,oDAF3D,OAKCF,EAAOG,KAAI,SAACC,EAAOC,GAChB,OACI,UAAC,IAAD,CACIC,QAASF,EACTF,UAAWK,GAAAA,CAAW,iBAAkB,QAAUH,GAFtD,wBAKc,4BAASA,IALvB,8BAGSC,EAAMG,qBAWjCc,EAAiB,WACnB,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIpB,UAAU,eAAd,yBACA,eAAGA,UAAU,qBAAb,sBACY,0CADZ,gFAKCF,EAAOG,KAAI,SAACC,EAAOC,GAChB,OACI,UAAC,IAAD,CAAOC,QAASF,EAAhB,sBACcA,EADd,cACgC,KAC5B,SAAC,KAAD,CAAMmB,GAAG,IAAIrB,UAAU,aAAvB,6BAFJ,mCAA4BG,EAAMG,qBAcpDgB,EAAY,WACd,OAAwBd,EAAAA,EAAAA,UAAmB,IAA3C,eAAOI,EAAP,KAAaW,EAAb,KAWA,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIvB,UAAU,eAAd,iCACA,cAAGA,UAAU,aAAb,0JAKEY,GAAQ,IAAIX,KAAI,SAACC,EAAOC,GACtB,OACI,SAAC,IAAD,CAA8BC,QAAQ,UAAUO,QAAS,kBAjBzD,SAACR,GACjB,IAAMqB,GAAW,OAAOZ,GACxBY,EAAYX,OAAOV,EAAO,GAC1BoB,EAAQC,GAcuEV,CAAYX,IAAQY,aAAW,EAA9F,oDAAYZ,EAAMG,gBAK1B,SAAC,IAAD,CAAQmB,QAAS,kBAAMF,GAAQ,SAACG,GAAD,wBAAcA,GAAd,CAAoBA,EAAKC,aAAxD,mCAqDhB,UA/Ce,WACX,OACI,iCACI,SAAC,KAAD,CACIC,gBAAiB,CACb,CAAEC,MAAO,UAAWC,KAAM,cAC1B,CAAED,MAAO,SAAUC,KAAM,aAAcC,QAAQ,IAEnDC,MAAO,YAGX,UAAC,IAAD,YACI,SAAC,IAAD,CAAKC,GAAI,EAAT,UACI,SAAClC,EAAD,OAGJ,SAAC,IAAD,CAAKkC,GAAI,EAAT,UACI,SAAC1B,EAAD,UAIR,UAAC,IAAD,YACI,SAAC,IAAD,CAAK0B,GAAI,EAAT,UACI,SAACd,EAAD,OAEJ,SAAC,IAAD,CAAKc,GAAI,EAAT,UACI,SAACb,EAAD,UAIR,UAAC,IAAD,YACI,SAAC,IAAD,WACI,SAACJ,EAAD,OAEJ,SAAC,IAAD,WACI,SAACE,EAAD,UAGR,SAAC,IAAD,WACI,SAAC,IAAD,CAAKe,GAAI,EAAT,UACI,SAACX,EAAD,a,wSChQdY,GAAgBC,EAAAA,EAAAA,GAAiB,MACvCD,EAAcE,YAAc,gBAC5B,IAAMC,GAAeC,EAAAA,EAAAA,GAAmB,gBAAiB,CACvDC,UAAWL,IAEPM,GAAYF,EAAAA,EAAAA,GAAmB,aAAc,CACjDC,UAAWE,EAAAA,IAEPC,EAAe,CACnBtC,QAAS,UACTuC,MAAM,EACNC,WAAYC,EAAAA,EACZC,WAAY,eAERC,EAAqBC,EAAAA,YAAiB,SAACC,EAAmBC,GAC9D,OAYIC,EAAAA,EAAAA,IAAgBF,EAAmB,CACrCN,KAAM,YAZNS,EADF,EACEA,SACAT,EAFF,EAEEA,KACAG,EAHF,EAGEA,WACAO,EAJF,EAIEA,aACArD,EALF,EAKEA,UACAsD,EANF,EAMEA,SACAlD,EAPF,EAOEA,QACAO,EARF,EAQEA,QACAI,EATF,EASEA,YACA6B,EAVF,EAUEA,WACGW,GAXL,YAeMC,GAASC,EAAAA,EAAAA,IAAmBL,EAAU,SACtCtC,GAAc4C,EAAAA,EAAAA,IAAiB,SAAAC,GAC/BhD,GACFA,GAAQ,EAAOgD,MAGbC,GAA4B,IAAfhB,EAAsBC,EAAAA,EAAOD,EAE1CiB,GAAqBC,EAAAA,EAAAA,MAAM,OAAD,QAAC,QAC/BC,KAAM,SACDH,OAAqBI,EAART,GAFY,IAG9BL,IAAKA,EACLlD,UAAWK,GAAAA,CAAWL,EAAWwD,EAAQpD,GAAW,GAAJ,OAAOoD,EAAP,YAAiBpD,GAAWW,GAAe,GAAJ,OAAOyC,EAAP,iBACvFF,SAAU,CAACvC,IAA4BkD,EAAAA,EAAAA,KAAKC,EAAAA,EAAa,CACvDzC,QAASX,EACT,aAAcgC,EACd1C,QAASiD,IACPC,MAGN,OAAKM,GACeK,EAAAA,EAAAA,KAAKL,GAAD,QAAC,QACvBO,eAAe,GACZZ,GAFmB,IAGtBL,SAAKc,EACLI,GAAIzB,EACJW,SAAUO,KANYlB,EAAOkB,EAAQ,QASzCd,EAAMX,YAAc,QACpBW,EAAML,aAAeA,EACrB,IAAe2B,OAAOC,OAAOvB,EAAO,CAClCwB,KAAM/B,EACNgC,QAASnC,K,uICvELoC,EAAY,CAChB,aAAcC,IAAAA,OACdjD,QAASiD,IAAAA,KAOTtE,QAASsE,IAAAA,MAAgB,CAAC,WAKtBR,EAA2BlB,EAAAA,YAAiB,WAI/CE,GAJ+C,IAChDlD,EADgD,EAChDA,UACAI,EAFgD,EAEhDA,QACGmD,GAH6C,mBAI1BU,EAAAA,EAAAA,KAAK,UAAD,QAC1Bf,IAAKA,EACLyB,KAAM,SACN3E,UAAWK,GAAAA,CAAW,YAAaD,GAAW,aAAJ,OAAiBA,GAAWJ,IACnEuD,OAELW,EAAY9B,YAAc,cAC1B8B,EAAYO,UAAYA,EACxBP,EAAYxB,aAfS,CACnB,aAAc,SAehB","sources":["pages/uikit/Alerts.tsx","../node_modules/react-bootstrap/esm/Alert.js","../node_modules/react-bootstrap/esm/CloseButton.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { Row, Col, Card, Alert, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport { PageTitle } from 'components';\r\n\r\nconst colors = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\r\n\r\nconst DefaultAlerts = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Default Alert</h4>\r\n                <p className=\"text-muted font-14 mb-3\">\r\n                    Provide contextual feedback messages for typical user actions with the handful of available and\r\n                    flexible alert messages. Alerts are available for any length of text, as well as an optional dismiss\r\n                    button.\r\n                </p>\r\n                <p>\r\n                    For proper styling, use one of the eight\r\n                    <strong>required</strong> contextual classes (e.g.,\r\n                    <code>.alert-success</code>). For background color use class\r\n                    <code>.bg-* </code>, <code>.text-white </code>\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Alert\r\n                            variant={color}\r\n                            key={index.toString()}\r\n                            className={classNames(color === 'light' ? 'text-dark' : 'text-' + color)}\r\n                        >\r\n                            <strong>{color} - </strong> A simple {color} alert—check it out!\r\n                        </Alert>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst DismissibleAlerts = () => {\r\n    const [colors, setColors] = useState<string[]>([\r\n        'primary',\r\n        'secondary',\r\n        'success',\r\n        'danger',\r\n        'warning',\r\n        'info',\r\n        'light',\r\n        'dark',\r\n    ]);\r\n\r\n    /*\r\n     * handle close\r\n     */\r\n    const handleClose = (index: number) => {\r\n        const list = [...colors];\r\n        list.splice(index, 1);\r\n        setColors(list);\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Dismissing Alerts</h4>\r\n                <p className=\"text-muted font-14 mb-3\">\r\n                    Add a dismiss button and the <code>.alert-dismissible</code> class, which adds extra padding to the\r\n                    right of the alert and positions the <code>.btn-close</code> button.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Alert\r\n                            variant=\"\"\r\n                            className={classNames('bg-' + color, color === 'light' ? 'text-dark' : 'text-white', {\r\n                                'text-light': ['dark', 'secondary'].includes(color),\r\n                            })}\r\n                            key={index.toString()}\r\n                            onClose={() => handleClose(index)}\r\n                            dismissible\r\n                        >\r\n                            <strong>{color} - </strong> A simple {color} alert—check it out!\r\n                        </Alert>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst AlertsWithIcon = () => {\r\n    const [colors] = useState<string[]>(['success', 'danger', 'warning', 'info']);\r\n\r\n    const icons: string[] = ['dripicons-checkmark', 'dripicons-wrong', 'dripicons-warning', 'dripicons-information'];\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Icons with Alerts</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    You can also include additional elements like icons, heading, etc along side the actual message.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Alert variant={color} key={index.toString()}>\r\n                            <i className={classNames(icons[index], 'me-2')}></i>This is a<strong>{color}</strong> alert\r\n                            - check it out!\r\n                        </Alert>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst AlertsWithRichContent = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Additional content</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Alerts can also contain additional HTML elements like headings, paragraphs and dividers.\r\n                </p>\r\n\r\n                <Alert variant=\"success\">\r\n                    <h4 className=\"alert-heading\">Well done!</h4>\r\n                    <p>\r\n                        Aww yeah, you successfully read this important alert message. This example text is going to run\r\n                        a bit longer so that you can see how spacing within an alert works with this kind of content.\r\n                    </p>\r\n                    <hr />\r\n                    <p className=\"mb-0\">\r\n                        Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\r\n                    </p>\r\n                </Alert>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst CustomAlerts = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Custom Alerts</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Display alert with transparent background and with contextual text color. Use classes{' '}\r\n                    <code>.bg-white</code>, and <code>.text-*</code>. E.g. <code>bg-white text-primary</code>.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Alert\r\n                            variant={color}\r\n                            className={classNames('bg-transparent', 'text-' + color)}\r\n                            key={index.toString()}\r\n                        >\r\n                            This is a <strong>{color}</strong> alert—check it out!\r\n                        </Alert>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst AlertsWithLink = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Link Color</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Use the <code>.alert-link</code> utility class to quickly provide matching colored links within any\r\n                    alert.\r\n                </p>\r\n\r\n                {colors.map((color, index) => {\r\n                    return (\r\n                        <Alert variant={color} key={index.toString()}>\r\n                            A simple {color} alert with{' '}\r\n                            <Link to=\"#\" className=\"alert-link\">\r\n                                an example link\r\n                            </Link>\r\n                            . Give it a click if you like.\r\n                        </Alert>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst LiveAlert = () => {\r\n    const [list, setList] = useState<number[]>([]);\r\n\r\n    /*\r\n     * handle close\r\n     */\r\n    const handleClose = (index: number) => {\r\n        const updatedList = [...list];\r\n        updatedList.splice(index, 1);\r\n        setList(updatedList);\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Alert Live example</h4>\r\n                <p className=\"sub-header\">\r\n                    Click the button below to show an alert (hidden with inline styles to start), then dismiss (and\r\n                    destroy) it with the built-in close button.\r\n                </p>\r\n\r\n                {(list || []).map((color, index) => {\r\n                    return (\r\n                        <Alert key={index.toString()} variant=\"success\" onClose={() => handleClose(index)} dismissible>\r\n                            Nice, you triggered this alert message!\r\n                        </Alert>\r\n                    );\r\n                })}\r\n                <Button onClick={() => setList((prev) => [...prev, prev.length])}>Show live alert</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Alerts = () => {\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Base UI', path: '/ui/alerts' },\r\n                    { label: 'Alerts', path: '/ui/alerts', active: true },\r\n                ]}\r\n                title={'Alerts'}\r\n            />\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <DefaultAlerts />\r\n                </Col>\r\n\r\n                <Col lg={6}>\r\n                    <DismissibleAlerts />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <CustomAlerts />\r\n                </Col>\r\n                <Col lg={6}>\r\n                    <AlertsWithLink />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col>\r\n                    <AlertsWithIcon />\r\n                </Col>\r\n                <Col>\r\n                    <AlertsWithRichContent />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <LiveAlert />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Alerts;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nconst AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nconst AlertLink = createWithBsPrefix('alert-link', {\n  Component: Anchor\n});\nconst defaultProps = {\n  variant: 'primary',\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nconst Alert = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    bsPrefix,\n    show,\n    closeLabel,\n    closeVariant,\n    className,\n    children,\n    variant,\n    onClose,\n    dismissible,\n    transition,\n    ...props\n  } = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  const handleClose = useEventCallback(e => {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  const Transition = transition === true ? Fade : transition;\n\n  const alert = /*#__PURE__*/_jsxs(\"div\", {\n    role: \"alert\",\n    ...(!Transition ? props : undefined),\n    ref: ref,\n    className: classNames(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),\n    children: [dismissible && /*#__PURE__*/_jsx(CloseButton, {\n      onClick: handleClose,\n      \"aria-label\": closeLabel,\n      variant: closeVariant\n    }), children]\n  });\n\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/_jsx(Transition, {\n    unmountOnExit: true,\n    ...props,\n    ref: undefined,\n    in: show,\n    children: alert\n  });\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nexport default Object.assign(Alert, {\n  Link: AlertLink,\n  Heading: AlertHeading\n});","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst defaultProps = {\n  'aria-label': 'Close'\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;"],"names":["colors","DefaultAlerts","className","map","color","index","variant","classNames","toString","DismissibleAlerts","useState","setColors","includes","onClose","list","splice","handleClose","dismissible","AlertsWithIcon","icons","AlertsWithRichContent","CustomAlerts","AlertsWithLink","to","LiveAlert","setList","updatedList","onClick","prev","length","breadCrumbItems","label","path","active","title","lg","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","Anchor","defaultProps","show","transition","Fade","closeLabel","Alert","React","uncontrolledProps","ref","useUncontrolled","bsPrefix","closeVariant","children","props","prefix","useBootstrapPrefix","useEventCallback","e","Transition","alert","_jsxs","role","undefined","_jsx","CloseButton","unmountOnExit","in","Object","assign","Link","Heading","propTypes","PropTypes","type"],"sourceRoot":""}
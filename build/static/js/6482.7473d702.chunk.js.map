{"version":3,"file":"static/js/6482.7473d702.chunk.js","mappings":"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","sources":["pages/uikit/Progress.tsx","../node_modules/react-bootstrap/esm/ProgressBar.js"],"sourcesContent":["import { Row, Col, Card, ProgressBar } from 'react-bootstrap';\r\nimport { PageTitle } from 'components';\r\n\r\nconst Basic = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Examples</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    A progressBar bar can be used to show a user how far along he/she is in a process.\r\n                </p>\r\n\r\n                <ProgressBar />\r\n                <ProgressBar now={25} className=\"mt-2\" />\r\n                <ProgressBar now={50} className=\"mt-2\" />\r\n                <ProgressBar now={75} className=\"mt-2\" />\r\n                <ProgressBar now={100} className=\"mt-2\" />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst WithLabels = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Labels</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add a <code>label</code> prop to show a visible percentage. For low percentages, consider adding a\r\n                    min-width to ensure the label's text is fully visible.\r\n                </p>\r\n\r\n                <ProgressBar now={25} label={`25%`} />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ScreenreaderOnlyLabel = () => {\r\n    const now = 60;\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Screenreader only label</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add a <code>visuallyHidden</code> prop to hide the label visually.\r\n                </p>\r\n\r\n                <ProgressBar now={now} label={`${now}%`} visuallyHidden />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ContextualAlternatives = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Contextual alternatives</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Progress bars use some of the same button and alert classes for consistent styles.\r\n                </p>\r\n\r\n                <ProgressBar now={25} className=\"mt-2\" variant=\"success\" />\r\n                <ProgressBar now={50} className=\"mt-2\" variant=\"info\" />\r\n                <ProgressBar now={75} className=\"mt-2\" variant=\"warning\" />\r\n                <ProgressBar now={100} className=\"mt-2\" variant=\"danger\" />\r\n                <ProgressBar now={65} className=\"mt-2\" variant=\"dark\" />\r\n                <ProgressBar now={50} className=\"mt-2\" variant=\"secondary\" />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Height = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Height</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    We only set a <code>height</code> value on the <code>ProgressBar</code>, so if you change that value\r\n                    the inner <code>.progress-bar</code> will automatically resize accordingly. Use{' '}\r\n                    <code>.progress-sm</code>,<code>.progress-md</code>,<code>.progress-lg</code>,\r\n                    <code>.progress-xl</code> classes.\r\n                </p>\r\n\r\n                <ProgressBar now={25} variant=\"danger\" style={{ height: 1 }} />\r\n                <ProgressBar now={25} className=\"mt-2\" style={{ height: 3 }} />\r\n                <ProgressBar now={25} className=\"mt-2 progress-sm\" variant=\"success\" />\r\n                <ProgressBar now={50} className=\"mt-2 progress-md\" variant=\"info\" />\r\n                <ProgressBar now={75} className=\"mt-2 progress-lg\" variant=\"warning\" />\r\n                <ProgressBar now={38} className=\"mt-2 progress-xl\" variant=\"success\" />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Striped = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Striped</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add <code>striped</code> to any <code>ProgressBar</code> to apply a stripe via CSS gradient over the\r\n                    progressBar barâ€™s background color.\r\n                </p>\r\n\r\n                <ProgressBar now={10} striped />\r\n                <ProgressBar now={25} className=\"mt-2\" variant=\"success\" striped />\r\n                <ProgressBar now={50} className=\"mt-2\" variant=\"info\" striped />\r\n                <ProgressBar now={75} className=\"mt-2\" variant=\"warning\" striped />\r\n                <ProgressBar now={100} className=\"mt-2\" variant=\"danger\" striped />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Animated = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Animated stripes</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    The striped gradient can also be animated. Add <code>animated</code> to <code>ProgressBar</code> to\r\n                    animate the stripes right to left via CSS3 animations.\r\n                </p>\r\n\r\n                <ProgressBar now={45} variant=\"primary\" animated></ProgressBar>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Stacked = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Stacked</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Nest <code>&lt;ProgressBar /&gt;</code>s to stack them.\r\n                </p>\r\n                <ProgressBar>\r\n                    <ProgressBar striped variant=\"success\" now={35} key={1} />\r\n                    <ProgressBar variant=\"warning\" now={20} key={2} />\r\n                    <ProgressBar striped variant=\"danger\" now={10} key={3} />\r\n                </ProgressBar>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ProgressBarExamples = () => {\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Base UI', path: '/ui/progressBar' },\r\n                    { label: 'ProgressBar', path: '/ui/progressBar', active: true },\r\n                ]}\r\n                title={'ProgressBar'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <Basic />\r\n                    <ScreenreaderOnlyLabel />\r\n                    <Height />\r\n                    <Animated />\r\n                </Col>\r\n                <Col xl={6}>\r\n                    <WithLabels />\r\n                    <ContextualAlternatives />\r\n                    <Striped />\r\n                    <Stacked />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProgressBarExamples;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;"],"names":["Basic","className","now","WithLabels","label","ScreenreaderOnlyLabel","visuallyHidden","ContextualAlternatives","variant","Height","style","height","Striped","striped","Animated","animated","Stacked","breadCrumbItems","path","active","title","xl","getPercentage","min","max","percentage","Math","round","renderProgressBar","ref","bsPrefix","props","_jsx","role","classNames","width","children","ProgressBar","React","isChild","useBootstrapPrefix","wrapperProps","map","child","cloneElement","displayName","defaultProps"],"sourceRoot":""}
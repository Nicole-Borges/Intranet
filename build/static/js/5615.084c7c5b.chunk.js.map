{"version":3,"file":"static/js/5615.084c7c5b.chunk.js","mappings":"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","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","components/table/Pagination.tsx","components/table/Table.tsx","components/ThemeCustomizer/LayoutTypes.tsx","components/ThemeCustomizer/LayoutColor.tsx","components/ThemeCustomizer/LayoutWidth.tsx","components/ThemeCustomizer/LeftSideBarTheme.tsx","components/ThemeCustomizer/LeftSideBarType.tsx","components/ThemeCustomizer/ThemeCustomizer.tsx","components/ThemeCustomizer/useThemeCustomizer.ts","components/VectorMap/useVectorMap.ts","components/VectorMap/WorldMap.tsx","components/VectorMap/CanadaMap.tsx","components/VectorMap/RussiaMap.tsx","components/VectorMap/SpainMap.tsx","components/VectorMap/UsaVectorMap.tsx","components/VectorMap/ItalyVectorMap.tsx","components/VectorMap/IraqVectorMap.tsx","components/ChatList/ChatForm.tsx","components/ChatList/hooks/useChatForm.ts","components/ChatList/ChatList.tsx","components/ChatList/hooks/useChatList.ts","components/FAQs.tsx","components/PricingCard.tsx","components/FileUploader/FileUploader.tsx","components/FileUploader/useFileUploader.ts","components/Portlet/Portlet.tsx","components/Portlet/usePortlet.ts","components/CardTitle.tsx","components/TodoList/TodoList.tsx","components/TodoList/useTodoList.ts","components/Datepicker.tsx","components/Loader.tsx","components/MessageItem.tsx","components/MessageList.tsx","components/Messages.tsx","components/PageTitle.tsx","components/Rating.tsx","components/Spinner.tsx","components/StatisticsChartWidget.tsx","components/StatisticsChartWidget2.tsx","components/StatisticsChartWidget3.tsx","components/StatisticsWidget.tsx","components/Timeline.tsx","components/TimelineItem.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useForm, Resolver, SubmitHandler, DefaultValues } from 'react-hook-form';\r\n\r\ntype VerticalFromProps<TFormValues> = {\r\n    defaultValues?: DefaultValues<TFormValues>;\r\n    resolver?: Resolver<TFormValues>;\r\n    children?: React.ReactNode;\r\n    onSubmit: SubmitHandler<TFormValues>;\r\n    formClass?: string;\r\n};\r\n\r\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps<TFormValues>) => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","import { InputHTMLAttributes } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\nimport { FieldErrors, Control } from 'react-hook-form';\r\nimport { useToggle } from 'hooks';\r\n\r\ntype PasswordInputProps = {\r\n    name: string;\r\n    placeholder?: string;\r\n    refCallback?: any;\r\n    errors: FieldErrors;\r\n    control?: Control<any>;\r\n    register?: any;\r\n    className?: string;\r\n};\r\n\r\n/* Password Input */\r\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }: PasswordInputProps) => {\r\n    const [showPassword, togglePassword] = useToggle();\r\n\r\n    return (\r\n        <InputGroup className=\"mb-0\">\r\n            <Form.Control\r\n                type={showPassword ? 'text' : 'password'}\r\n                placeholder={placeholder}\r\n                name={name}\r\n                id={name}\r\n                as=\"input\"\r\n                ref={(r: HTMLInputElement) => {\r\n                    if (refCallback) refCallback(r);\r\n                }}\r\n                className={className}\r\n                isInvalid={errors && errors[name] ? true : false}\r\n                {...(register ? register(name) : {})}\r\n                autoComplete={name}\r\n            />\r\n            <div\r\n                className={classNames('input-group-text', 'input-group-password', {\r\n                    'show-password': showPassword,\r\n                })}\r\n                data-password={showPassword ? 'true' : 'false'}\r\n            >\r\n                <span className=\"password-eye\" onClick={togglePassword}></span>\r\n            </div>\r\n        </InputGroup>\r\n    );\r\n};\r\n\r\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n    label?: string;\r\n    type?: string;\r\n    name: string;\r\n    placeholder?: string;\r\n    register?: any;\r\n    errors?: FieldErrors;\r\n    control?: Control<any>;\r\n    className?: string;\r\n    labelClassName?: string;\r\n    containerClass?: string;\r\n    refCallback?: any;\r\n    children?: React.ReactNode;\r\n    rows?: string;\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    control,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    rows,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'password' ? (\r\n                        <>\r\n                            <Form.Group className={containerClass}>\r\n                                {label ? (\r\n                                    <>\r\n                                        {' '}\r\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\r\n                                    </>\r\n                                ) : null}\r\n                                <PasswordInput\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors!}\r\n                                    register={register}\r\n                                    className={className}\r\n                                />\r\n\r\n                                {errors && errors[name] ? (\r\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                                        {errors[name]['message']}\r\n                                    </Form.Control.Feedback>\r\n                                ) : null}\r\n                            </Form.Group>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'select' ? (\r\n                                <Form.Group className={containerClass}>\r\n                                    {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                    <Form.Select\r\n                                        type={type}\r\n                                        label={label}\r\n                                        name={name}\r\n                                        id={name}\r\n                                        ref={(r: HTMLInputElement) => {\r\n                                            if (refCallback) refCallback(r);\r\n                                        }}\r\n                                        comp={comp}\r\n                                        className={className}\r\n                                        isInvalid={errors && errors[name] ? true : false}\r\n                                        {...(register ? register(name) : {})}\r\n                                        {...otherProps}\r\n                                    >\r\n                                        {children}\r\n                                    </Form.Select>\r\n\r\n                                    {errors && errors[name] ? (\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors[name]['message']}\r\n                                        </Form.Control.Feedback>\r\n                                    ) : null}\r\n                                </Form.Group>\r\n                            ) : (\r\n                                <>\r\n                                    {type === 'checkbox' || type === 'radio' ? (\r\n                                        <Form.Group className={containerClass}>\r\n                                            <Form.Check\r\n                                                type={type}\r\n                                                label={label}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                ref={(r: HTMLInputElement) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                            />\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    ) : (\r\n                                        <Form.Group className={containerClass}>\r\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                            <Form.Control\r\n                                                type={type}\r\n                                                placeholder={placeholder}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                as={comp}\r\n                                                ref={(r: HTMLInputElement) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                                autoComplete={name}\r\n                                            >\r\n                                                {children ? children : null}\r\n                                            </Form.Control>\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport { TableInstance } from 'react-table';\r\n\r\nexport type PageSize = {\r\n    text: string;\r\n    value: number;\r\n};\r\n\r\ntype PaginationProps = {\r\n    tableProps: TableInstance;\r\n    sizePerPageList: PageSize[];\r\n};\r\n\r\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps) => {\r\n    /**\r\n     * pagination count , index\r\n     */\r\n    const [pageCount, setPageCount] = useState<number>(tableProps.pageCount);\r\n    const [pageIndex, setPageIndex] = useState<number>(tableProps.state.pageIndex);\r\n\r\n    useEffect(() => {\r\n        setPageCount(tableProps.pageCount);\r\n        setPageIndex(tableProps.state.pageIndex);\r\n    }, [tableProps.pageCount, tableProps.state.pageIndex]);\r\n\r\n    /**\r\n     * get filter pages\r\n     */\r\n    const filterPages = useCallback(\r\n        (visiblePages: number[], totalPages: number) => {\r\n            return visiblePages.filter((page: number) => page <= pageCount);\r\n        },\r\n        [pageCount]\r\n    );\r\n\r\n    /**\r\n     * handle visible pages\r\n     */\r\n    const getVisiblePages = useCallback(\r\n        (page: number, total: number) => {\r\n            if (total < 7) {\r\n                return filterPages([1, 2, 3, 4, 5, 6], total);\r\n            } else {\r\n                if (page % 5 >= 0 && page > 4 && page + 2 < total) {\r\n                    return [1, page - 1, page, page + 1, total];\r\n                } else if (page % 5 >= 0 && page > 4 && page + 2 >= total) {\r\n                    return [1, total - 3, total - 2, total - 1, total];\r\n                } else {\r\n                    return [1, 2, 3, 4, 5, total];\r\n                }\r\n            }\r\n        },\r\n        [filterPages]\r\n    );\r\n\r\n    /**\r\n     * handle page change\r\n     * @param page - current page\r\n     * @returns\r\n     */\r\n    const changePage = (page: number) => {\r\n        const activePage = pageIndex + 1;\r\n\r\n        if (page === activePage) {\r\n            return;\r\n        }\r\n\r\n        const visiblePages = getVisiblePages(page, pageCount);\r\n        setVisiblePages(filterPages(visiblePages, pageCount));\r\n\r\n        tableProps.gotoPage(page - 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const visiblePages = getVisiblePages(0, pageCount);\r\n        setVisiblePages(visiblePages);\r\n    }, [pageCount, getVisiblePages]);\r\n\r\n    const [visiblePages, setVisiblePages] = useState<number[]>(getVisiblePages(0, pageCount));\r\n    const activePage: number = pageIndex + 1;\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1\">\r\n            {sizePerPageList.length > 0 && (\r\n                <div className=\"d-inline-block me-3\">\r\n                    <label className=\"me-1\">Display :</label>\r\n                    <select\r\n                        value={tableProps.state.pageSize}\r\n                        onChange={(e) => {\r\n                            tableProps.setPageSize(Number(e.target.value));\r\n                        }}\r\n                        className=\"form-select d-inline-block w-auto\"\r\n                    >\r\n                        {(sizePerPageList || []).map((pageSize, index) => {\r\n                            return (\r\n                                <option key={index.toString()} value={pageSize.value}>\r\n                                    {pageSize.text}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </select>\r\n                </div>\r\n            )}\r\n\r\n            <span className=\"me-3\">\r\n                Page{' '}\r\n                <strong>\r\n                    {pageIndex + 1} of {tableProps.pageOptions.length}\r\n                </strong>{' '}\r\n            </span>\r\n\r\n            <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\r\n                <label>Go to page : </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={pageIndex + 1}\r\n                    min=\"1\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                        tableProps.gotoPage(page);\r\n                        setPageIndex(tableProps.state.pageIndex);\r\n                    }}\r\n                    className=\"form-control w-25 ms-1 d-inline-block\"\r\n                />\r\n            </span>\r\n\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\r\n                <li\r\n                    key=\"prevpage\"\r\n                    className={classNames('page-item', 'paginate_button', 'previous', {\r\n                        disabled: activePage === 1,\r\n                    })}\r\n                    onClick={() => {\r\n                        if (activePage === 1) return;\r\n                        changePage(activePage - 1);\r\n                    }}\r\n                >\r\n                    <Link to=\"#\" className=\"page-link\">\r\n                        <i className=\"mdi mdi-chevron-left\"></i>\r\n                    </Link>\r\n                </li>\r\n                {(visiblePages || []).map((page, index, array) => {\r\n                    return array[index - 1] + 1 < page ? (\r\n                        <React.Fragment key={page.toString()}>\r\n                            <li className=\"page-item disabled d-none d-xl-inline-block\">\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    ...\r\n                                </Link>\r\n                            </li>\r\n                            <li\r\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\r\n                                    active: activePage === page,\r\n                                })}\r\n                                onClick={(e) => changePage(page)}\r\n                            >\r\n                                <Link to=\"#\" className=\"page-link\">\r\n                                    {page}\r\n                                </Link>\r\n                            </li>\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <li\r\n                            key={page.toString()}\r\n                            className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\r\n                                active: activePage === page,\r\n                            })}\r\n                            onClick={(e) => changePage(page)}\r\n                        >\r\n                            <Link to=\"#\" className=\"page-link\">\r\n                                {page}\r\n                            </Link>\r\n                        </li>\r\n                    );\r\n                })}\r\n                <li\r\n                    key=\"nextpage\"\r\n                    className={classNames('page-item', 'paginate_button', 'next', {\r\n                        disabled: activePage === tableProps.pageCount,\r\n                    })}\r\n                    onClick={() => {\r\n                        if (activePage === tableProps.pageCount) return;\r\n                        changePage(activePage + 1);\r\n                    }}\r\n                >\r\n                    <Link to=\"#\" className=\"page-link\">\r\n                        <i className=\"mdi mdi-chevron-right\"></i>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Pagination };\r\n","import React, { useRef, useEffect, forwardRef, useState } from 'react';\r\nimport {\r\n    useTable,\r\n    useSortBy,\r\n    usePagination,\r\n    useRowSelect,\r\n    useGlobalFilter,\r\n    useAsyncDebounce,\r\n    useExpanded,\r\n    Column,\r\n    Row,\r\n    FilterValue,\r\n} from 'react-table';\r\nimport classNames from 'classnames';\r\nimport { Pagination, PageSize } from './Pagination';\r\n\r\nexport type CellFormatter<T extends Object = {}> = {\r\n    row: Row<T>;\r\n};\r\n\r\ntype GlobalFilterProps = {\r\n    preGlobalFilteredRows: any;\r\n    globalFilter: any;\r\n    setGlobalFilter: (filterValue: FilterValue) => void;\r\n    searchBoxClass?: string;\r\n};\r\n\r\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }: GlobalFilterProps) => {\r\n    const count = preGlobalFilteredRows.length;\r\n    const [value, setValue] = useState<any>(globalFilter);\r\n    const onChange = useAsyncDebounce((value) => {\r\n        setGlobalFilter(value || undefined);\r\n    }, 200);\r\n\r\n    return (\r\n        <div className={classNames(searchBoxClass)}>\r\n            <span className=\"d-flex align-items-center\">\r\n                Search :{' '}\r\n                <input\r\n                    value={value || ''}\r\n                    onChange={(e) => {\r\n                        setValue(e.target.value);\r\n                        onChange(e.target.value);\r\n                    }}\r\n                    placeholder={`${count} records...`}\r\n                    className=\"form-control w-auto ms-1\"\r\n                />\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype IndeterminateCheckboxProps = {\r\n    indeterminate: any;\r\n    children?: React.ReactNode;\r\n};\r\n\r\nconst IndeterminateCheckbox = forwardRef<HTMLInputElement, IndeterminateCheckboxProps>(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = useRef();\r\n        const resolvedRef: any = ref || defaultRef;\r\n\r\n        useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n\r\n        return (\r\n            <div className=\"form-check\">\r\n                <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\r\n                <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\ntype TableProps<TableValues> = {\r\n    isSearchable?: boolean;\r\n    isSortable?: boolean;\r\n    pagination?: boolean;\r\n    isSelectable?: boolean;\r\n    isExpandable?: boolean;\r\n    sizePerPageList?: PageSize[];\r\n    columns: ReadonlyArray<Column>;\r\n    data: TableValues[];\r\n    pageSize?: number;\r\n    searchBoxClass?: string;\r\n    tableClass?: string;\r\n    theadClass?: string;\r\n};\r\n\r\nconst Table = <TableValues extends object = {}>(props: TableProps<TableValues>) => {\r\n    const isSearchable = props['isSearchable'] || false;\r\n    const isSortable = props['isSortable'] || false;\r\n    const pagination = props['pagination'] || false;\r\n    const isSelectable = props['isSelectable'] || false;\r\n    const isExpandable = props['isExpandable'] || false;\r\n    const sizePerPageList = props['sizePerPageList'] || [];\r\n\r\n    let otherProps: any = {};\r\n\r\n    if (isSearchable) {\r\n        otherProps['useGlobalFilter'] = useGlobalFilter;\r\n    }\r\n    if (isSortable) {\r\n        otherProps['useSortBy'] = useSortBy;\r\n    }\r\n    if (isExpandable) {\r\n        otherProps['useExpanded'] = useExpanded;\r\n    }\r\n    if (pagination) {\r\n        otherProps['usePagination'] = usePagination;\r\n    }\r\n    if (isSelectable) {\r\n        otherProps['useRowSelect'] = useRowSelect;\r\n    }\r\n\r\n    const dataTable = useTable(\r\n        {\r\n            columns: props['columns'],\r\n            data: props['data'],\r\n            initialState: { pageSize: props['pageSize'] || 10 },\r\n        },\r\n\r\n        otherProps.hasOwnProperty('useGlobalFilter') && otherProps['useGlobalFilter'],\r\n        otherProps.hasOwnProperty('useSortBy') && otherProps['useSortBy'],\r\n        otherProps.hasOwnProperty('useExpanded') && otherProps['useExpanded'],\r\n        otherProps.hasOwnProperty('usePagination') && otherProps['usePagination'],\r\n        otherProps.hasOwnProperty('useRowSelect') && otherProps['useRowSelect'],\r\n\r\n        (hooks) => {\r\n            isSelectable &&\r\n                hooks.visibleColumns.push((columns) => [\r\n                    // Let's make a column for selection\r\n                    {\r\n                        id: 'selection',\r\n                        // The header can use the table's getToggleAllRowsSelectedProps method\r\n                        // to render a checkbox\r\n                        Header: ({ getToggleAllPageRowsSelectedProps }: any) => (\r\n                            <div>\r\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\r\n                            </div>\r\n                        ),\r\n                        // The cell can use the individual row's getToggleRowSelectedProps method\r\n                        // to the render a checkbox\r\n                        Cell: ({ row }: any) => (\r\n                            <div>\r\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                            </div>\r\n                        ),\r\n                    },\r\n                    ...columns,\r\n                ]);\r\n\r\n            isExpandable &&\r\n                hooks.visibleColumns.push((columns) => [\r\n                    // Let's make a column for selection\r\n                    {\r\n                        // Build our expander column\r\n                        id: 'expander', // Make sure it has an ID\r\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\r\n                        ),\r\n                        Cell: ({ row }) =>\r\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n                            // to build the toggle for expanding a row\r\n                            row.canExpand ? (\r\n                                <span\r\n                                    {...row.getToggleRowExpandedProps({\r\n                                        style: {\r\n                                            // We can even use the row.depth property\r\n                                            // and paddingLeft to indicate the depth\r\n                                            // of the row\r\n                                            paddingLeft: `${row.depth * 2}rem`,\r\n                                        },\r\n                                    })}\r\n                                >\r\n                                    {row.isExpanded ? '-' : '+'}\r\n                                </span>\r\n                            ) : null,\r\n                    },\r\n                    ...columns,\r\n                ]);\r\n        }\r\n    );\r\n\r\n    let rows = pagination ? dataTable.page : dataTable.rows;\r\n\r\n    return (\r\n        <>\r\n            {isSearchable && (\r\n                <GlobalFilter\r\n                    preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\r\n                    globalFilter={dataTable.state.globalFilter}\r\n                    setGlobalFilter={dataTable.setGlobalFilter}\r\n                    searchBoxClass={props['searchBoxClass']}\r\n                />\r\n            )}\r\n\r\n            <div className=\"table-responsive\">\r\n                <table\r\n                    {...dataTable.getTableProps()}\r\n                    className={classNames('table table-centered react-table', props['tableClass'])}\r\n                >\r\n                    <thead className={props['theadClass']}>\r\n                        {dataTable.headerGroups.map((headerGroup) => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                {headerGroup.headers.map((column: any) => (\r\n                                    <th\r\n                                        {...column.getHeaderProps(\r\n                                            column.defaultCanSort && column.getSortByToggleProps()\r\n                                        )}\r\n                                        className={classNames({\r\n                                            sorting_desc: column.isSortedDesc === true,\r\n                                            sorting_asc: column.isSortedDesc === false,\r\n                                            sortable: column.defaultCanSort === true,\r\n                                        })}\r\n                                    >\r\n                                        {column.render('Header')}\r\n                                    </th>\r\n                                ))}\r\n                            </tr>\r\n                        ))}\r\n                    </thead>\r\n                    <tbody {...dataTable.getTableBodyProps()}>\r\n                        {(rows || []).map((row, i) => {\r\n                            dataTable.prepareRow(row);\r\n                            return (\r\n                                <tr {...row.getRowProps()}>\r\n                                    {row.cells.map((cell) => {\r\n                                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                                    })}\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            {pagination && <Pagination tableProps={dataTable} sizePerPageList={sizePerPageList} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport { Table };\r\n","import { Form } from 'react-bootstrap';\r\nimport * as layoutConstants from 'appConstants';\r\n\r\ntype LayoutTypesProps = {\r\n    changeLayoutType: (value: string) => void;\r\n    layoutType: string;\r\n    layoutConstants: typeof layoutConstants.LayoutTypes;\r\n};\r\n\r\nconst LayoutTypes = ({ changeLayoutType, layoutType, layoutConstants }: LayoutTypesProps) => {\r\n    return (\r\n        <>\r\n            <h5 className=\"mt-3\">Layout</h5>\r\n\r\n            <hr className=\"mt-1\" />\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    onChange={(e) => changeLayoutType(e.target.value)}\r\n                    name=\"layout-type\"\r\n                    value={layoutConstants.LAYOUT_VERTICAL}\r\n                    id=\"vertical-layout\"\r\n                    checked={layoutType === layoutConstants.LAYOUT_VERTICAL}\r\n                />\r\n                <Form.Check.Label htmlFor=\"vertical-layout\">Vertical Layout</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    onChange={(e) => changeLayoutType(e.target.value)}\r\n                    name=\"layout-type\"\r\n                    value={layoutConstants.LAYOUT_HORIZONTAL}\r\n                    id=\"horizontal-layout\"\r\n                    checked={layoutType === layoutConstants.LAYOUT_HORIZONTAL}\r\n                />\r\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Horizontal Layout</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    onChange={(e) => changeLayoutType(e.target.value)}\r\n                    name=\"layout-type\"\r\n                    value={layoutConstants.LAYOUT_DETACHED}\r\n                    id=\"detached-layout\"\r\n                    checked={layoutType === layoutConstants.LAYOUT_DETACHED}\r\n                />\r\n                <Form.Check.Label htmlFor=\"detached-layout\">Detached Layout</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    onChange={(e) => changeLayoutType(e.target.value)}\r\n                    name=\"layout-type\"\r\n                    value={layoutConstants.LAYOUT_FULL}\r\n                    id=\"full-mode-layout\"\r\n                    checked={layoutType === layoutConstants.LAYOUT_FULL}\r\n                />\r\n                <Form.Check.Label htmlFor=\"full-mode-layout\">Full Layout</Form.Check.Label>\r\n            </Form.Check>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LayoutTypes;\r\n","import { Form } from 'react-bootstrap';\r\nimport * as layoutConstants from 'appConstants';\r\n\r\ntype LayoutColorProps = {\r\n    changeLayoutColorScheme: (value: string) => void;\r\n    layoutColor: string;\r\n    layoutConstants: typeof layoutConstants.LayoutColor;\r\n};\r\n\r\nconst LayoutColor = ({ changeLayoutColorScheme, layoutColor, layoutConstants }: LayoutColorProps) => {\r\n    return (\r\n        <>\r\n            <h5 className=\"mt-4\">Color Scheme</h5>\r\n\r\n            <hr className=\"mt-1\" />\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\r\n                    name=\"layout-color\"\r\n                    value={layoutConstants.LAYOUT_COLOR_LIGHT}\r\n                    id=\"light-mode\"\r\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_LIGHT}\r\n                />\r\n                <Form.Check.Label htmlFor=\"vertical-layout\">Light Mode</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\r\n                    name=\"layout-color\"\r\n                    value={layoutConstants.LAYOUT_COLOR_DARK}\r\n                    id=\"dark-mode\"\r\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_DARK}\r\n                />\r\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Dark Mode</Form.Check.Label>\r\n            </Form.Check>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LayoutColor;\r\n","import { Form } from 'react-bootstrap';\r\nimport * as layoutConstants from 'appConstants';\r\n\r\ntype LayoutWidthProps = {\r\n    changeWidthMode: (value: string) => void;\r\n    layoutWidth: string;\r\n    layoutConstants: typeof layoutConstants.LayoutWidth;\r\n};\r\n\r\nconst LayoutWidth = ({ changeWidthMode, layoutWidth, layoutConstants }: LayoutWidthProps) => {\r\n    return (\r\n        <>\r\n            <h5 className=\"mt-4\">Width</h5>\r\n\r\n            <hr className=\"mt-1\" />\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"width\"\r\n                    id=\"fluid-check\"\r\n                    value={layoutConstants.LAYOUT_WIDTH_FLUID}\r\n                    onChange={(e) => changeWidthMode(e.target.value)}\r\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_FLUID}\r\n                />\r\n                <Form.Check.Label htmlFor=\"fluid-check\">Fluid</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"width\"\r\n                    id=\"boxed-check\"\r\n                    value={layoutConstants.LAYOUT_WIDTH_BOXED}\r\n                    onChange={(e) => changeWidthMode(e.target.value)}\r\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_BOXED}\r\n                />\r\n                <Form.Check.Label htmlFor=\"boxed-check\">Boxed</Form.Check.Label>\r\n            </Form.Check>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LayoutWidth;\r\n","import { Form } from 'react-bootstrap';\r\nimport * as layoutConstants from 'appConstants';\r\n\r\ntype LeftSideBarThemeProps = {\r\n    changeLeftSidebarTheme: (value: string) => void;\r\n    leftSideBarTheme: string;\r\n    layoutConstants: typeof layoutConstants.SideBarTheme;\r\n};\r\n\r\nconst LeftSideBarTheme = ({ changeLeftSidebarTheme, leftSideBarTheme, layoutConstants }: LeftSideBarThemeProps) => {\r\n    return (\r\n        <>\r\n            <h5 className=\"mt-4\">Left Sidebar Color</h5>\r\n            <hr className=\"mt-1\" />\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"theme\"\r\n                    id=\"brand-check\"\r\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_DEFAULT}\r\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\r\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DEFAULT}\r\n                />\r\n                <Form.Check.Label htmlFor=\"brand-check\">Default</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"theme\"\r\n                    id=\"light-check\"\r\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\r\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\r\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\r\n                />\r\n                <Form.Check.Label htmlFor=\"light-check\">Light</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"theme\"\r\n                    id=\"dark-check\"\r\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_DARK}\r\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\r\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DARK}\r\n                />\r\n                <Form.Check.Label htmlFor=\"dark-check\">Dark</Form.Check.Label>\r\n            </Form.Check>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LeftSideBarTheme;\r\n","import { Form } from 'react-bootstrap';\r\nimport * as layoutConstants from 'appConstants';\r\n\r\ntype LeftSideBarTypeProps = {\r\n    changeLeftSiderbarType: (value: string) => void;\r\n    leftSideBarType: string;\r\n    layoutConstants: typeof layoutConstants.SideBarWidth;\r\n};\r\n\r\nconst LeftSideBarType = ({ changeLeftSiderbarType, leftSideBarType, layoutConstants }: LeftSideBarTypeProps) => {\r\n    return (\r\n        <>\r\n            <Form.Check className=\"form-check form-switch mb-1 mt-3\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"leftsidebar-size\"\r\n                    id=\"default-check\"\r\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_FIXED}\r\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\r\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_FIXED}\r\n                />\r\n                <Form.Check.Label htmlFor=\"default-check\">Fixed</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"leftsidebar-size\"\r\n                    id=\"condensed-check\"\r\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\r\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\r\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\r\n                />\r\n                <Form.Check.Label htmlFor=\"condensed-check\">Condensed</Form.Check.Label>\r\n            </Form.Check>\r\n\r\n            <Form.Check className=\"form-check form-switch mb-1\">\r\n                <Form.Check.Input\r\n                    type=\"radio\"\r\n                    name=\"leftsidebar-size\"\r\n                    id=\"compact-check\"\r\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_SCROLLABLE}\r\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\r\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_SCROLLABLE}\r\n                />\r\n                <Form.Check.Label htmlFor=\"compact-check\">Scrollable</Form.Check.Label>\r\n            </Form.Check>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LeftSideBarType;\r\n","import * as layoutConstants from 'appConstants';\r\nimport LayoutTypes from './LayoutTypes';\r\nimport LayoutColor from './LayoutColor';\r\nimport LayoutWidth from './LayoutWidth';\r\nimport LeftSideBarTheme from './LeftSideBarTheme';\r\nimport LeftSideBarType from './LeftSideBarType';\r\nimport useThemeCustomizer from './useThemeCustomizer';\r\n\r\nconst ThemeCustomizer = () => {\r\n    const {\r\n        layoutColor,\r\n        layoutType,\r\n        layoutWidth,\r\n        leftSideBarType,\r\n        leftSideBarTheme,\r\n        disableLayoutWidth,\r\n        disableSidebarTheme,\r\n        disableSidebarType,\r\n        changeLayoutType,\r\n        changeLayoutColorScheme,\r\n        changeWidthMode,\r\n        changeLeftSidebarTheme,\r\n        changeLeftSiderbarType,\r\n        reset,\r\n    } = useThemeCustomizer();\r\n\r\n    return (\r\n        <div className=\"p-3\">\r\n            <div className=\"alert alert-warning\" role=\"alert\">\r\n                <strong>Customize </strong> the overall color scheme, sidebar menu, etc.\r\n            </div>\r\n\r\n            {/* Layouts */}\r\n            <LayoutTypes\r\n                changeLayoutType={changeLayoutType}\r\n                layoutType={layoutType}\r\n                layoutConstants={layoutConstants.LayoutTypes}\r\n            />\r\n\r\n            {/* color scheme */}\r\n            <LayoutColor\r\n                changeLayoutColorScheme={changeLayoutColorScheme}\r\n                layoutColor={layoutColor}\r\n                layoutConstants={layoutConstants.LayoutColor}\r\n            />\r\n\r\n            {/* Width */}\r\n            {disableLayoutWidth && (\r\n                <LayoutWidth\r\n                    changeWidthMode={changeWidthMode}\r\n                    layoutWidth={layoutWidth}\r\n                    layoutConstants={layoutConstants.LayoutWidth}\r\n                />\r\n            )}\r\n\r\n            {/* Left Sidebar */}\r\n            {disableSidebarTheme && (\r\n                <LeftSideBarTheme\r\n                    changeLeftSidebarTheme={changeLeftSidebarTheme}\r\n                    leftSideBarTheme={leftSideBarTheme}\r\n                    layoutConstants={layoutConstants.SideBarTheme}\r\n                />\r\n            )}\r\n\r\n            {/* Left Sidebar Size */}\r\n            {disableSidebarType && (\r\n                <LeftSideBarType\r\n                    changeLeftSiderbarType={changeLeftSiderbarType}\r\n                    leftSideBarType={leftSideBarType}\r\n                    layoutConstants={layoutConstants.SideBarWidth}\r\n                />\r\n            )}\r\n\r\n            <div className=\"d-grid mt-4\">\r\n                <button className=\"btn btn-primary\" id=\"resetBtn\" onClick={() => reset()}>\r\n                    Reset to Default\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThemeCustomizer;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n    changeLayout,\r\n    changeLayoutColor,\r\n    changeLayoutWidth,\r\n    changeSidebarTheme,\r\n    changeSidebarType,\r\n} from 'redux/actions';\r\nimport * as layoutConstants from 'appConstants';\r\nimport { useRedux } from 'hooks';\r\n\r\nexport default function useThemeCustomizer() {\r\n    const { dispatch, appSelector } = useRedux();\r\n\r\n    const { layoutColor, layoutType, layoutWidth, leftSideBarType, leftSideBarTheme } = appSelector((state) => ({\r\n        layoutColor: state.Layout.layoutColor,\r\n        layoutType: state.Layout.layoutType,\r\n        layoutWidth: state.Layout.layoutWidth,\r\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\r\n        leftSideBarType: state.Layout.leftSideBarType,\r\n    }));\r\n\r\n    const [disableLayoutWidth, setDisableLayoutWidth] = useState<boolean>(false);\r\n    const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\r\n    const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\r\n\r\n    /**\r\n     * change state based on props changes\r\n     */\r\n    const _loadStateFromProps = useCallback(() => {\r\n        setDisableLayoutWidth(\r\n            layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED &&\r\n                layoutType !== layoutConstants.LayoutTypes.LAYOUT_FULL\r\n        );\r\n\r\n        setDisableSidebarTheme(\r\n            layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL &&\r\n                layoutType !== layoutConstants.LayoutTypes.LAYOUT_DETACHED\r\n        );\r\n        setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\r\n    }, [layoutType]);\r\n\r\n    useEffect(() => {\r\n        _loadStateFromProps();\r\n    }, [_loadStateFromProps]);\r\n\r\n    /**\r\n     * On layout change\r\n     */\r\n    const changeLayoutType = (value: string) => {\r\n        var layout = value;\r\n        switch (layout) {\r\n            case 'topnav':\r\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\r\n                break;\r\n            case 'detached':\r\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\r\n                break;\r\n            case 'full':\r\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_FULL));\r\n                break;\r\n            default:\r\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Change the layout color\r\n     */\r\n    const changeLayoutColorScheme = (value: string) => {\r\n        var mode = value;\r\n        switch (mode) {\r\n            case 'dark':\r\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\r\n                break;\r\n            default:\r\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Change the width mode\r\n     */\r\n    const changeWidthMode = (value: string) => {\r\n        var mode = value;\r\n\r\n        switch (mode) {\r\n            case 'boxed':\r\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\r\n                break;\r\n            default:\r\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Changes the theme\r\n     */\r\n    const changeLeftSidebarTheme = (value: string) => {\r\n        var theme = value;\r\n        switch (theme) {\r\n            case 'default':\r\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT));\r\n                break;\r\n            case 'light':\r\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\r\n                break;\r\n            default:\r\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Change the leftsiderbar type\r\n     */\r\n    const changeLeftSiderbarType = (value: string) => {\r\n        var type = value;\r\n        switch (type) {\r\n            case 'condensed':\r\n                dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_CONDENSED));\r\n                break;\r\n            case 'scrollable':\r\n                dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_SCROLLABLE));\r\n                break;\r\n            default:\r\n                dispatch(changeSidebarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED));\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset everything\r\n     */\r\n    const reset = () => {\r\n        changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\r\n        changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\r\n        changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\r\n        changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DEFAULT);\r\n        changeLeftSiderbarType(layoutConstants.SideBarWidth.LEFT_SIDEBAR_TYPE_FIXED);\r\n    };\r\n\r\n    return {\r\n        layoutColor,\r\n        layoutType,\r\n        layoutWidth,\r\n        leftSideBarType,\r\n        leftSideBarTheme,\r\n        disableLayoutWidth,\r\n        disableSidebarTheme,\r\n        disableSidebarType,\r\n        changeLayoutType,\r\n        changeLayoutColorScheme,\r\n        changeWidthMode,\r\n        changeLeftSidebarTheme,\r\n        changeLeftSiderbarType,\r\n        reset,\r\n    };\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport default function useVectorMap(options: Record<string, unknown> = {}, type: string) {\r\n    const selectorId = type + new Date().getTime();\r\n    const [map, setMap] = useState<any>();\r\n\r\n    useEffect(() => {\r\n        if (!map) {\r\n            // create jsvectormap\r\n            const map = new (window as any)['jsVectorMap']({\r\n                selector: '#' + selectorId,\r\n                map: type,\r\n                ...options,\r\n            });\r\n\r\n            setMap(map);\r\n        }\r\n    }, [selectorId, map, options, type]);\r\n\r\n    return { selectorId };\r\n}\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/world.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype WorldVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst WorldVectorMap = ({ width, height, options }: WorldVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'world');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default WorldVectorMap;\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/canada.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype CanadaVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst CanadaVectorMap = ({ width, height, options }: CanadaVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'canada');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default CanadaVectorMap;\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/russia.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype RussiaVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst RussiaVectorMap = ({ width, height, options }: RussiaVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'russia');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default RussiaVectorMap;\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/spain.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype SpainVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst SpainVectorMap = ({ width, height, options }: SpainVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'spain');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default SpainVectorMap;\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/us-merc-en.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype UsaVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst UsaVectorMap = ({ width, height, options }: UsaVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'us_merc_en');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default UsaVectorMap;\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/italy.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype ItalyVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst ItalyVectorMap = ({ width, height, options }: ItalyVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'italy');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default ItalyVectorMap;\r\n","import React from 'react';\r\nimport 'jsvectormap';\r\nimport 'jsvectormap/dist/maps/iraq.js';\r\nimport useVectorMap from './useVectorMap';\r\n\r\ntype IraqVectorMapProps = {\r\n    width?: string;\r\n    height?: string;\r\n    options?: Record<string, unknown>;\r\n};\r\n\r\nconst IraqVectorMap = ({ width, height, options }: IraqVectorMapProps) => {\r\n    const { selectorId } = useVectorMap(options, 'iraq');\r\n\r\n    return <div id={selectorId} style={{ width: width, height: height }}></div>;\r\n};\r\n\r\nexport default IraqVectorMap;\r\n","import { Row, Col } from 'react-bootstrap';\r\nimport { FormInput } from '../form';\r\nimport { useChatForm } from './hooks';\r\n\r\nconst ChatForm = ({ onNewMessagesPosted }: { onNewMessagesPosted: (message: string) => void }) => {\r\n    const { register, control, errors, handleSubmit, handleValidMessageSubmit } = useChatForm();\r\n\r\n    return (\r\n        <form\r\n            name=\"chat-form\"\r\n            id=\"chat-form\"\r\n            onSubmit={handleSubmit((value) => handleValidMessageSubmit(value, onNewMessagesPosted))}\r\n            className=\"needs-validation m-3\"\r\n        >\r\n            <Row>\r\n                <Col>\r\n                    <FormInput\r\n                        type=\"text\"\r\n                        name=\"newMessage\"\r\n                        className=\"form-control chat-input\"\r\n                        placeholder=\"Enter your text\"\r\n                        register={register}\r\n                        key=\"newMessage\"\r\n                        errors={errors}\r\n                        control={control}\r\n                    />\r\n                </Col>\r\n                <Col className=\"col-auto\">\r\n                    <button type=\"submit\" className=\"btn btn-danger chat-send waves-effect waves-light\">\r\n                        Send\r\n                    </button>\r\n                </Col>\r\n            </Row>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ChatForm;\r\n","import { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\ntype FormValues = {\r\n    newMessage: string;\r\n};\r\n\r\nexport default function useChatForm() {\r\n    /*\r\n     * form validation schema\r\n     */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            newMessage: yup.string().required('Please enter your messsage'),\r\n        })\r\n    );\r\n\r\n    const methods = useForm<FormValues>({ resolver: schemaResolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n        reset,\r\n    } = methods;\r\n\r\n    /**\r\n     * Handle valid form submission\r\n     */\r\n    const handleValidMessageSubmit = (value: Record<string, string>, callback: (message: string) => void) => {\r\n        const message = value['newMessage'];\r\n        callback(message);\r\n        reset();\r\n    };\r\n\r\n    return {\r\n        register,\r\n        control,\r\n        errors,\r\n        handleSubmit,\r\n        handleValidMessageSubmit,\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\nimport { useChatList } from './hooks';\r\nimport ChatForm from './ChatForm';\r\nimport { CardTitle } from 'components';\r\n\r\nexport type Message = {\r\n    id: number;\r\n    userPic?: string;\r\n    userName: string;\r\n    text: string;\r\n    postedOn: string;\r\n};\r\n\r\n/* Chat Item */\r\nconst ChatItemAvatar = ({ userAvatar, postedOn }: { userAvatar: string; postedOn: string }) => {\r\n    return (\r\n        <div className=\"chat-avatar\">\r\n            <img src={userAvatar} alt={userAvatar} />\r\n            <i>{postedOn}</i>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ChatItemText = ({ userName, text }: { userName: string; text: string }) => {\r\n    return (\r\n        <div className=\"conversation-text\">\r\n            <div className=\"ctext-wrap\">\r\n                <i>{userName}</i>\r\n                <p>{text}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ChatItem = ({\r\n    children,\r\n    placement,\r\n    className,\r\n}: {\r\n    children: React.ReactNode;\r\n    placement: string;\r\n    className?: string;\r\n}) => {\r\n    return <li className={classNames('clearfix', { odd: placement === 'left' }, className)}>{children}</li>;\r\n};\r\n\r\n/**\r\n * ChatList\r\n */\r\ntype ChatListProps = {\r\n    className?: string;\r\n    chatMessages: Message[];\r\n};\r\n\r\nconst ChatList = ({ chatMessages, className }: ChatListProps) => {\r\n    const { messages, handleNewMessagePosted } = useChatList(chatMessages);\r\n\r\n    return (\r\n        <Card className=\"mb-0\">\r\n            <Card.Body className=\"p-0\">\r\n                <div className=\"px-3 pt-3\">\r\n                    <CardTitle\r\n                        containerClass=\"d-flex align-items-center justify-content-between mb-2\"\r\n                        title=\"Chat\"\r\n                        menuItems={[{ label: 'Refresh' }, { label: 'Settings' }]}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"chat-conversation\">\r\n                    {/* chat messages */}\r\n                    <SimpleBar style={{ maxHeight: '322px', width: '100%' }}>\r\n                        <ul className={classNames('conversation-list', className, 'px-3')}>\r\n                            {(messages || []).map((message, index) => {\r\n                                return (\r\n                                    <ChatItem\r\n                                        key={index.toString()}\r\n                                        placement={index > 0 ? (index % 2 === 0 ? '' : 'left') : 'right'}\r\n                                    >\r\n                                        {message.userPic && (\r\n                                            <ChatItemAvatar userAvatar={message.userPic} postedOn={message.postedOn} />\r\n                                        )}\r\n                                        <ChatItemText userName={message.userName} text={message.text} />\r\n                                    </ChatItem>\r\n                                );\r\n                            })}\r\n                        </ul>\r\n                    </SimpleBar>\r\n\r\n                    {/* chat form */}\r\n                    <ChatForm onNewMessagesPosted={handleNewMessagePosted} />\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport { ChatList };\r\n","import { useState } from 'react';\r\nimport { Message } from '../index';\r\n\r\nexport default function useChatList(chatMessages: Message[]) {\r\n    const [messages, setMessages] = useState<Message[]>(chatMessages);\r\n\r\n    /**\r\n     * Handle new message posted\r\n     */\r\n    const handleNewMessagePosted = (message: string) => {\r\n        setMessages(\r\n            messages.concat({\r\n                id: messages.length + 1,\r\n                userName: 'Geneva',\r\n                text: message,\r\n                postedOn: new Date().getHours() + ':' + new Date().getMinutes(),\r\n            })\r\n        );\r\n    };\r\n\r\n    return {\r\n        messages,\r\n        handleNewMessagePosted,\r\n    };\r\n}\r\n","import { Row, Col } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\nexport type FAQItem = {\r\n    id: number;\r\n    question: string;\r\n    answer: string;\r\n    titleClass?: string;\r\n    textClass?: string;\r\n};\r\n\r\ntype FAQsProps = {\r\n    rawFaqs: FAQItem[];\r\n};\r\n\r\nconst FAQs = ({ rawFaqs }: FAQsProps) => {\r\n    return (\r\n        <Row className=\"mt-5\">\r\n            {rawFaqs.map((ques, index) => {\r\n                return ques.id % 2 !== 0 ? (\r\n                    <Col key={index.toString()} lg={{ span: 5, offset: 1 }}>\r\n                        <div>\r\n                            <div className=\"faq-question-q-box\">Q.</div>\r\n                            <h4 className={classNames('faq-question', ques.titleClass)}>{ques.question}</h4>\r\n                            <p className={classNames('faq-answer mb-4', ques.textClass)}>{ques.answer}</p>\r\n                        </div>\r\n                    </Col>\r\n                ) : (\r\n                    <Col key={index.toString()} lg={5}>\r\n                        <div>\r\n                            <div className=\"faq-question-q-box\">Q.</div>\r\n                            <h4 className={classNames('faq-question', ques.titleClass)}>{ques.question}</h4>\r\n                            <p className={classNames('faq-answer mb-4', ques.textClass)}>{ques.answer}</p>\r\n                        </div>\r\n                    </Col>\r\n                );\r\n            })}\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport { FAQs };\r\n","import React from 'react';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\nexport type PricingPlan = {\r\n    id: number;\r\n    name: string;\r\n    icon: string;\r\n    price: string;\r\n    duration: string;\r\n    features: Array<string>;\r\n    isRecommended: boolean;\r\n};\r\n\r\ntype PricingCardProps = {\r\n    plans: Array<PricingPlan>;\r\n    containerClass?: string;\r\n};\r\n\r\nconst PricingCard = ({ plans, containerClass }: PricingCardProps) => {\r\n    return (\r\n        <Row className={containerClass}>\r\n            {plans.map((plan, index) => {\r\n                return (\r\n                    <Col md={4} key={index.toString()}>\r\n                        <Card\r\n                            className={classNames('card-pricing', {\r\n                                'card-pricing-recommended': plan.isRecommended,\r\n                            })}\r\n                        >\r\n                            <Card.Body className=\"text-center\">\r\n                                {plan.isRecommended && <div className=\"card-pricing-plan-tag\">Recommended</div>}\r\n                                <p className=\"card-pricing-plan-name fw-bold text-uppercase\">{plan.name}</p>\r\n                                <i className={classNames('card-pricing-icon', plan.icon, 'text-primary')}></i>\r\n                                <h2 className=\"card-pricing-price\">\r\n                                    {plan.price} <span>/ {plan.duration}</span>\r\n                                </h2>\r\n                                <ul className=\"card-pricing-features\">\r\n                                    {plan.features.map((feature, index1) => {\r\n                                        return <li key={index1.toString()}>{feature}</li>;\r\n                                    })}\r\n                                </ul>\r\n                                <button className=\"btn btn-primary mt-4 mb-2 btn-rounded\">Choose Plan</button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                );\r\n            })}\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport { PricingCard };\r\n","import { Link } from 'react-router-dom';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport Dropzone from 'react-dropzone';\r\nimport useFileUploader from './useFileUploader';\r\n\r\nexport type FileType = File & {\r\n    preview?: string;\r\n    formattedSize?: string;\r\n};\r\n\r\ntype FileUploaderProps = {\r\n    onFileUpload?: (files: FileType[]) => void;\r\n    showPreview?: boolean;\r\n};\r\n\r\nconst FileUploader = ({ showPreview = true, onFileUpload }: FileUploaderProps) => {\r\n    const { selectedFiles, handleAcceptedFiles, removeFile } = useFileUploader(showPreview);\r\n\r\n    return (\r\n        <>\r\n            <Dropzone onDrop={(acceptedFiles) => handleAcceptedFiles(acceptedFiles, onFileUpload)}>\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div className=\"dropzone\">\r\n                        <div className=\"dz-message needsclick\" {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            <i className=\"h3 text-muted dripicons-cloud-upload\"></i>\r\n                            <h5>Drop files here or click to upload.</h5>\r\n                            <span className=\"text-muted font-13\">\r\n                                (This is just a demo dropzone. Selected files are <strong>not</strong> actually\r\n                                uploaded.)\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            {showPreview && selectedFiles.length > 0 && (\r\n                <div className=\"dropzone-previews mt-3\" id=\"uploadPreviewTemplate\">\r\n                    {(selectedFiles || []).map((f, i) => {\r\n                        return (\r\n                            <Card className=\"mt-1 mb-0 shadow-none border\" key={i + '-file'}>\r\n                                <div className=\"p-2\">\r\n                                    <Row className=\"align-items-center\">\r\n                                        {f.preview && (\r\n                                            <Col className=\"col-auto\">\r\n                                                <img\r\n                                                    data-dz-thumbnail=\"\"\r\n                                                    className=\"avatar-sm rounded bg-light\"\r\n                                                    alt={f.name}\r\n                                                    src={f.preview}\r\n                                                />\r\n                                            </Col>\r\n                                        )}\r\n                                        {!f.preview && (\r\n                                            <Col className=\"col-auto\">\r\n                                                <div className=\"avatar-sm\">\r\n                                                    <span className=\"avatar-title bg-primary rounded\">\r\n                                                        {f.type.split('/')[0]}\r\n                                                    </span>\r\n                                                </div>\r\n                                            </Col>\r\n                                        )}\r\n                                        <Col className=\"ps-0\">\r\n                                            <Link to=\"#\" className=\"text-muted fw-bold\">\r\n                                                {f.name}\r\n                                            </Link>\r\n                                            <p className=\"mb-0\">\r\n                                                <strong>{f.formattedSize}</strong>\r\n                                            </p>\r\n                                        </Col>\r\n                                        <Col className=\"text-end\">\r\n                                            <Link to=\"#\" className=\"btn btn-link btn-lg text-muted shadow-none\">\r\n                                                <i className=\"dripicons-cross\" onClick={() => removeFile(f)}></i>\r\n                                            </Link>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport { FileUploader };\r\n","import { useState } from 'react';\r\nimport { FileType } from './index';\r\n\r\nexport default function useFileUploader(showPreview: boolean = true) {\r\n    const [selectedFiles, setSelectedFiles] = useState<FileType[]>([]);\r\n\r\n    /**\r\n     * Handled the accepted files and shows the preview\r\n     */\r\n    const handleAcceptedFiles = (files: FileType[], callback?: (files: FileType[]) => void) => {\r\n        var allFiles = files;\r\n\r\n        if (showPreview) {\r\n            files.map((file) =>\r\n                Object.assign(file, {\r\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\r\n                    formattedSize: formatBytes(file.size),\r\n                })\r\n            );\r\n\r\n            allFiles = [...selectedFiles];\r\n            allFiles.push(...files);\r\n            setSelectedFiles(allFiles);\r\n        }\r\n\r\n        if (callback) callback(allFiles);\r\n    };\r\n\r\n    /**\r\n     * Formats the size\r\n     */\r\n    const formatBytes = (bytes: number, decimals: number = 2) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const dm = decimals < 0 ? 0 : decimals;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n    };\r\n\r\n    /*\r\n     * Removes the selected file\r\n     */\r\n    const removeFile = (file: FileType) => {\r\n        const newFiles = [...selectedFiles];\r\n        newFiles.splice(newFiles.indexOf(file), 1);\r\n        setSelectedFiles(newFiles);\r\n    };\r\n\r\n    return {\r\n        selectedFiles,\r\n        handleAcceptedFiles,\r\n        removeFile,\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport { Card, Collapse } from 'react-bootstrap';\r\nimport { useToggle } from 'hooks';\r\nimport usePortlet from './usePortlet';\r\n\r\ntype PortletProps = {\r\n    className?: string;\r\n    children: React.ReactElement;\r\n};\r\n\r\nconst Portlet = ({ className, children }: PortletProps) => {\r\n    const [collapse, toggleContent] = useToggle(true);\r\n    const [isHidden, , remove] = useToggle();\r\n\r\n    const [loading, reloadContent] = usePortlet();\r\n    return (\r\n        <>\r\n            {!isHidden ? (\r\n                <Card className={classNames(className)}>\r\n                    {loading && (\r\n                        <div className=\"card-disabled\">\r\n                            <div className=\"card-portlets-loader\"></div>\r\n                        </div>\r\n                    )}\r\n\r\n                    <Card.Body>\r\n                        <div className=\"card-widgets\">\r\n                            <Link to=\"#\" className={classNames(className)} onClick={reloadContent}>\r\n                                <i className=\"mdi mdi-refresh\"></i>\r\n                            </Link>\r\n                            <Link to=\"#\" className={classNames(className)} onClick={toggleContent}>\r\n                                <i\r\n                                    className={classNames('mdi', {\r\n                                        'mdi-minus': collapse,\r\n                                        'mdi-plus': !collapse,\r\n                                    })}\r\n                                ></i>\r\n                            </Link>\r\n                            <Link to=\"#\" className={classNames(className)} onClick={remove}>\r\n                                <i className=\"mdi mdi-close\"></i>\r\n                            </Link>\r\n                        </div>\r\n\r\n                        <Card.Title as=\"h5\" className=\"mb-0\">\r\n                            Card title\r\n                        </Card.Title>\r\n\r\n                        <Collapse in={collapse}>\r\n                            <div>\r\n                                <div className=\"pt-3\">{children}</div>\r\n                            </div>\r\n                        </Collapse>\r\n                    </Card.Body>\r\n                </Card>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Portlet;\r\n","import { useState } from 'react';\r\n\r\nexport default function usePortlet(): [boolean, () => void] {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n\r\n    /**\r\n     * Reload the content\r\n     */\r\n    const reloadContent = () => {\r\n        setLoading(true);\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n        }, 500 + 300 * (Math.random() * 5));\r\n    };\r\n\r\n    return [loading, reloadContent];\r\n}\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\ntype MenuItem = {\r\n    label: string;\r\n    icon?: string;\r\n    variant?: string;\r\n    hasDivider?: boolean;\r\n};\r\n\r\ntype CardTitleProps = {\r\n    menuItems: Array<MenuItem>;\r\n    title: string | React.ReactNode;\r\n    containerClass: string;\r\n    icon?: string;\r\n};\r\n\r\nconst CardTitle = ({ title, containerClass, icon, menuItems }: CardTitleProps) => {\r\n    return (\r\n        <div className={classNames(containerClass)}>\r\n            {typeof title === 'string' ? <h4 className=\"header-title mb-0\">{title}</h4> : title}\r\n            <Dropdown>\r\n                <Dropdown.Toggle as={Link} to=\"#\" className=\"arrow-none card-drop\">\r\n                    <i className={classNames(icon ? icon : 'mdi mdi-dots-vertical')} />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu align=\"end\">\r\n                    {(menuItems || []).map((item, index) => {\r\n                        return (\r\n                            <React.Fragment key={index.toString()}>\r\n                                {item.hasDivider && <Dropdown.Divider as=\"div\" />}\r\n                                <Dropdown.Item className={classNames(item.variant ? item.variant : '')}>\r\n                                    {item.icon && <i className={classNames(item.icon, 'me-1')}></i>}\r\n                                    {item.label}\r\n                                </Dropdown.Item>\r\n                            </React.Fragment>\r\n                        );\r\n                    })}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardTitle;\r\n","import { Row, Col, Card, Button } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport { FormInput } from '../form';\r\nimport CardTitle from '../CardTitle';\r\nimport useTodoList from './useTodoList';\r\n\r\ntype TodoListProps = {\r\n    addTodo?: boolean;\r\n    height?: string;\r\n};\r\n\r\nconst TodoList = ({ addTodo, height }: TodoListProps) => {\r\n    const {\r\n        register,\r\n        control,\r\n        errors,\r\n        todoData,\r\n        handleSubmit,\r\n        archiveTodos,\r\n        toggleTodo,\r\n        saveTodo,\r\n        getInprogressTodos,\r\n    } = useTodoList();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body className=\"pb-0\">\r\n                <CardTitle\r\n                    containerClass=\"d-flex align-items-center justify-content-between mb-2\"\r\n                    title=\"ToDo\"\r\n                    menuItems={[{ label: 'Settings' }, { label: 'Action' }]}\r\n                />\r\n            </Card.Body>\r\n            <div className=\"todoapp\">\r\n                <Card.Body className=\"p-0\">\r\n                    {addTodo && (\r\n                        <Row className=\"px-3\">\r\n                            <Col>\r\n                                <h5 id=\"todo-message\">\r\n                                    <span id=\"todo-remaining\">{getInprogressTodos().length}</span> of{' '}\r\n                                    <span id=\"todo-total\">{todoData.length}</span> remaining\r\n                                </h5>\r\n                            </Col>\r\n                            <Col className=\"col-auto\">\r\n                                <Button\r\n                                    className=\"float-end btn-sm\"\r\n                                    variant=\"light\"\r\n                                    id=\"btn-archive\"\r\n                                    onClick={archiveTodos}\r\n                                >\r\n                                    Archive\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    )}\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <SimpleBar className=\"px-3\" style={{ maxHeight: height }}>\r\n                                <ul className=\"list-group list-group-flush todo-list\" id=\"todo-list\">\r\n                                    {todoData.map((todo, index) => {\r\n                                        return (\r\n                                            <li key={index.toString()} className=\"list-group-item border-0 ps-0\">\r\n                                                <div className=\"form-check mb-0\">\r\n                                                    <input\r\n                                                        type=\"checkbox\"\r\n                                                        className=\"form-check-input todo-done\"\r\n                                                        id={todo.id.toString()}\r\n                                                        checked={todo.done}\r\n                                                        onChange={() => toggleTodo(todo, index)}\r\n                                                    />\r\n                                                    <label className=\"form-check-label\" htmlFor={todo.id.toString()}>\r\n                                                        {todo.done ? <s>{todo.text}</s> : todo.text}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </li>\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            </SimpleBar>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {addTodo && (\r\n                        <Row>\r\n                            <Col>\r\n                                <form\r\n                                    name=\"todo-form\"\r\n                                    id=\"todo-form\"\r\n                                    onSubmit={handleSubmit(saveTodo)}\r\n                                    className=\"needs-validation mx-3 mb-3\"\r\n                                >\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <FormInput\r\n                                                type=\"text\"\r\n                                                name=\"newTodo\"\r\n                                                className=\"form-control\"\r\n                                                placeholder=\"Add new todo\"\r\n                                                register={register}\r\n                                                key=\"newTodo\"\r\n                                                errors={errors}\r\n                                                control={control}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col className=\"col-auto\">\r\n                                            <button type=\"submit\" className=\"btn btn-primary waves-effect waves-light\">\r\n                                                Add\r\n                                            </button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </Col>\r\n                        </Row>\r\n                    )}\r\n                </Card.Body>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\ntype TodoDataItem = {\r\n    id: number;\r\n    text: string;\r\n    done: boolean;\r\n};\r\n\r\nexport default function useTodoList() {\r\n    // default todo data\r\n    const [todoData, setTodoData] = useState<TodoDataItem[]>([\r\n        {\r\n            id: 1,\r\n            text: 'Design One page theme',\r\n            done: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Build a js based app',\r\n            done: true,\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'Creating component page',\r\n            done: true,\r\n        },\r\n        {\r\n            id: 4,\r\n            text: 'Testing??',\r\n            done: true,\r\n        },\r\n        {\r\n            id: 5,\r\n            text: 'Hehe!! This looks cool!',\r\n            done: false,\r\n        },\r\n        {\r\n            id: 6,\r\n            text: 'Create new version 3.0',\r\n            done: false,\r\n        },\r\n        {\r\n            id: 7,\r\n            text: 'Build an angular app',\r\n            done: true,\r\n        },\r\n    ]);\r\n\r\n    /*\r\n     * form validation schema\r\n     */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            newTodo: yup.string().required('Please enter your task name'),\r\n        })\r\n    );\r\n\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ resolver: schemaResolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n        reset,\r\n    } = methods;\r\n\r\n    /**\r\n     * Saves the todo\r\n     */\r\n    const saveTodo = (value: Record<string, string>) => {\r\n        let newTodo = [...todoData];\r\n        newTodo.push({\r\n            id: todoData.length + 1,\r\n            text: value['newTodo'],\r\n            done: false,\r\n        });\r\n        setTodoData(newTodo);\r\n        reset();\r\n    };\r\n\r\n    /**\r\n     * Returns the remaining todos\r\n     */\r\n    const getInprogressTodos = () => {\r\n        return todoData.filter((item) => item.done === false);\r\n    };\r\n\r\n    /**\r\n     * Archives the todos\r\n     */\r\n    const archiveTodos = () => {\r\n        setTodoData(todoData.filter((item) => item.done !== true));\r\n    };\r\n\r\n    /**\r\n     * Toggle the status\r\n     * @param todoItem todo item\r\n     */\r\n    const toggleTodo = (todoItem: TodoDataItem, index: number) => {\r\n        const newTodoData = todoData.map((todo, i) => {\r\n            return index === i ? Object.assign(todo, { done: !todoItem.done }) : todo;\r\n        });\r\n        setTodoData(newTodoData);\r\n    };\r\n\r\n    return {\r\n        register,\r\n        control,\r\n        errors,\r\n        todoData,\r\n        handleSubmit,\r\n        archiveTodos,\r\n        toggleTodo,\r\n        saveTodo,\r\n        getInprogressTodos,\r\n    };\r\n}\r\n","import React, { forwardRef } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport classNames from 'classnames';\r\n\r\ntype DatepickerInputProps = {\r\n    onClick?: () => void;\r\n    value?: string;\r\n    inputClass: string;\r\n    children?: React.ReactNode;\r\n};\r\n\r\n/* Datepicker with Input */\r\nconst DatepickerInput = forwardRef<HTMLInputElement, DatepickerInputProps>((props, ref) => {\r\n    const onDateValueChange = () => {\r\n        console.log('date value changed');\r\n    };\r\n    return (\r\n        <input\r\n            type=\"text\"\r\n            className=\"form-control date\"\r\n            onClick={props.onClick}\r\n            value={props.value}\r\n            onChange={onDateValueChange}\r\n            ref={ref}\r\n        />\r\n    );\r\n});\r\n\r\n/* Datepicker with Addon Input */\r\nconst DatepickerInputWithAddon = forwardRef<HTMLInputElement, DatepickerInputProps>((props, ref) => (\r\n    <div className=\"input-group\" ref={ref}>\r\n        <input\r\n            type=\"text\"\r\n            className=\"form-control form-control-light\"\r\n            onClick={props.onClick}\r\n            value={props.value}\r\n            readOnly\r\n        />\r\n        <div className=\"input-group-append\">\r\n            <span className=\"input-group-text bg-primary border-primary text-white\">\r\n                <i className=\"mdi mdi-calendar-range font-13\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n));\r\n\r\ntype HyperDatepickerProps = {\r\n    value: Date;\r\n    onChange: (date: Date) => void;\r\n    hideAddon?: boolean;\r\n    inputClass?: string;\r\n    dateFormat?: string;\r\n    minDate?: Date;\r\n    maxDate?: Date;\r\n    className?: string;\r\n    showTimeSelect?: boolean;\r\n    tI?: number;\r\n    timeFormat?: string;\r\n    timeCaption?: string;\r\n    showTimeSelectOnly?: boolean;\r\n    monthsShown?: number;\r\n    inline?: boolean;\r\n};\r\n\r\nconst HyperDatepicker = (props: HyperDatepickerProps) => {\r\n    // handle custom input\r\n    const input =\r\n        (props.hideAddon || false) === true ? (\r\n            <DatepickerInput inputClass={props.inputClass!} />\r\n        ) : (\r\n            <DatepickerInputWithAddon inputClass={props.inputClass!} />\r\n        );\r\n\r\n    return (\r\n        <>\r\n            {/* date picker control */}\r\n            <DatePicker\r\n                customInput={input}\r\n                timeIntervals={props.tI}\r\n                className={classNames('form-control', props.inputClass)}\r\n                selected={props.value}\r\n                onChange={(date) => props.onChange(date!)}\r\n                showTimeSelect={props.showTimeSelect}\r\n                timeFormat={props.timeFormat || 'hh:mm a'}\r\n                timeCaption={props.timeCaption}\r\n                dateFormat={props.dateFormat || 'MM/dd/yyyy'}\r\n                minDate={props.minDate}\r\n                maxDate={props.maxDate}\r\n                monthsShown={props.monthsShown}\r\n                showTimeSelectOnly={props.showTimeSelectOnly}\r\n                inline={props.inline}\r\n                autoComplete=\"off\"\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HyperDatepicker;\r\n","/**\r\n * Renders the preloader\r\n */\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"preloader\" id=\"preloader\">\r\n            <div className=\"status\" id=\"status\">\r\n                <div className=\"bouncing-loader\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype MessageItemProps = {\r\n    className?: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst MessageItem = ({ className, children }: MessageItemProps) => {\r\n    return <div className={classNames('inbox-item', className)}>{children}</div>;\r\n};\r\n\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype MessageListProps = {\r\n    className?: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * MessageList\r\n */\r\nconst MessageList = ({ className, children }: MessageListProps) => {\r\n    return <div className={classNames('inbox-widget', className)}>{children}</div>;\r\n};\r\n\r\nexport default MessageList;\r\n","import { Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport CardTitle from './CardTitle';\r\nimport MessageList from './MessageList';\r\nimport MessageItem from './MessageItem';\r\nimport profileImg from 'assets/images/users/avatar-2.jpg';\r\nimport avatar1 from 'assets/images/users/avatar-3.jpg';\r\nimport avatar2 from 'assets/images/users/avatar-4.jpg';\r\nimport avatar3 from 'assets/images/users/avatar-5.jpg';\r\nimport avatar6 from 'assets/images/users/avatar-6.jpg';\r\n\r\nconst Messages = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <CardTitle\r\n                    containerClass=\"d-flex align-items-center justify-content-between mb-3\"\r\n                    title=\"Messages\"\r\n                    menuItems={[{ label: 'Settings' }, { label: 'Action' }]}\r\n                />\r\n\r\n                <MessageList>\r\n                    <MessageItem>\r\n                        <div className=\"inbox-item-img\">\r\n                            <img src={profileImg} className=\"rounded-circle\" alt=\"\" />\r\n                        </div>\r\n                        <p className=\"inbox-item-author\">Tomaslau</p>\r\n                        <p className=\"inbox-item-text\">I've finished it! See you so...</p>\r\n                        <p className=\"inbox-item-date\">\r\n                            <Link to=\"#\" className=\"btn btn-sm btn-link text-info font-13\">\r\n                                {' '}\r\n                                Reply{' '}\r\n                            </Link>\r\n                        </p>\r\n                    </MessageItem>\r\n\r\n                    <MessageItem>\r\n                        <div className=\"inbox-item-img\">\r\n                            <img src={avatar1} className=\"rounded-circle\" alt=\"\" />\r\n                        </div>\r\n                        <p className=\"inbox-item-author\">Stillnotdavid</p>\r\n                        <p className=\"inbox-item-text\">This theme is awesome!</p>\r\n                        <p className=\"inbox-item-date\">\r\n                            <Link to=\"#\" className=\"btn btn-sm btn-link text-info font-13\">\r\n                                {' '}\r\n                                Reply{' '}\r\n                            </Link>\r\n                        </p>\r\n                    </MessageItem>\r\n\r\n                    <MessageItem>\r\n                        <div className=\"inbox-item-img\">\r\n                            <img src={avatar2} className=\"rounded-circle\" alt=\"\" />\r\n                        </div>\r\n                        <p className=\"inbox-item-author\">Kurafire</p>\r\n                        <p className=\"inbox-item-text\">Nice to meet you</p>\r\n                        <p className=\"inbox-item-date\">\r\n                            <Link to=\"#\" className=\"btn btn-sm btn-link text-info font-13\">\r\n                                {' '}\r\n                                Reply{' '}\r\n                            </Link>\r\n                        </p>\r\n                    </MessageItem>\r\n\r\n                    <MessageItem>\r\n                        <div className=\"inbox-item-img\">\r\n                            <img src={avatar3} className=\"rounded-circle\" alt=\"\" />\r\n                        </div>\r\n                        <p className=\"inbox-item-author\">Shahedk</p>\r\n                        <p className=\"inbox-item-text\">Hey! there I'm available...</p>\r\n                        <p className=\"inbox-item-date\">\r\n                            <Link to=\"#\" className=\"btn btn-sm btn-link text-info font-13\">\r\n                                {' '}\r\n                                Reply{' '}\r\n                            </Link>\r\n                        </p>\r\n                    </MessageItem>\r\n\r\n                    <MessageItem>\r\n                        <div className=\"inbox-item-img\">\r\n                            <img src={avatar6} className=\"rounded-circle\" alt=\"\" />\r\n                        </div>\r\n                        <p className=\"inbox-item-author\">Adhamdannaway</p>\r\n                        <p className=\"inbox-item-text\">This theme is awesome!</p>\r\n                        <p className=\"inbox-item-date\">\r\n                            <Link to=\"#\" className=\"btn btn-sm btn-link text-info font-13\">\r\n                                {' '}\r\n                                Reply{' '}\r\n                            </Link>\r\n                        </p>\r\n                    </MessageItem>\r\n                </MessageList>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Messages;\r\n","import { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string;\r\n    path: string;\r\n    active?: boolean;\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>;\r\n    title: string;\r\n};\r\n\r\nconst PageTitle = ({ breadCrumbItems, title }: PageTitleProps) => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\">Hyper</Breadcrumb.Item>\r\n\r\n                            {breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index.toString()}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index.toString()} href={item.path}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\">{title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import classNames from 'classnames';\r\nimport React from 'react';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\ntype RatingProps = {\r\n    tag?: React.ElementType;\r\n    className?: string;\r\n    value?: number;\r\n};\r\n\r\nconst Rating = ({ tag = 'p', className, value }: RatingProps) => {\r\n    const rating: number = Math.floor(value || 0);\r\n    const emptyStars: number = Math.floor(rating < 5 ? 5 - rating : 0);\r\n    const Tag: React.ElementType = tag;\r\n\r\n    return (\r\n        <Tag className={classNames('font-16', className)} id=\"rating-container\">\r\n            {[...Array(rating)].map((x, index) => (\r\n                <OverlayTrigger\r\n                    key={index.toString()}\r\n                    placement=\"right\"\r\n                    overlay={<Tooltip id=\"button-tooltip\">{value || 0}</Tooltip>}\r\n                >\r\n                    <span className=\"text-warning mdi mdi-star\"></span>\r\n                </OverlayTrigger>\r\n            ))}\r\n            {[...Array(emptyStars)].map((x, index) => (\r\n                <OverlayTrigger\r\n                    key={index.toString()}\r\n                    placement=\"right\"\r\n                    overlay={<Tooltip id=\"button-tooltip\">{value || 0}</Tooltip>}\r\n                >\r\n                    <span className=\"text-warning mdi mdi-star-outline\"></span>\r\n                </OverlayTrigger>\r\n            ))}\r\n        </Tag>\r\n    );\r\n};\r\n\r\nexport default Rating;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype SpinnerProps = {\r\n    tag?: React.ElementType;\r\n    className?: string;\r\n    size?: 'lg' | 'md' | 'sm';\r\n    type?: 'bordered' | 'grow';\r\n    color?: string;\r\n    children?: React.ReactNode;\r\n};\r\n\r\nconst Spinner = ({ tag = 'div', type = 'bordered', className, color, size, children }: SpinnerProps) => {\r\n    const Tag: React.ElementType = tag || 'div';\r\n\r\n    return (\r\n        <Tag\r\n            role=\"status\"\r\n            className={classNames(\r\n                {\r\n                    'spinner-border': type === 'bordered',\r\n                    'spinner-grow': type === 'grow',\r\n                },\r\n                color ? `text-${color}` : `text-secondary`,\r\n                { [`avatar-${size}`]: size },\r\n                className\r\n            )}\r\n        >\r\n            {children}\r\n        </Tag>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport Chart from 'react-apexcharts';\r\nimport classNames from 'classnames';\r\nimport { ApexOptions } from 'apexcharts';\r\n\r\ntype StatisticsChartWidgetProps = {\r\n    colors?: Array<string>;\r\n    type?: 'line' | 'bar';\r\n    name?: string;\r\n    data?: Array<number>;\r\n    textClass?: string;\r\n    bgClass?: string;\r\n    description?: string;\r\n    title?: string;\r\n    stats?: string;\r\n    trend: {\r\n        textClass: string;\r\n        icon: string;\r\n        value: string;\r\n    };\r\n};\r\n\r\nconst StatisticsChartWidget = ({\r\n    colors,\r\n    type,\r\n    name,\r\n    data,\r\n    textClass,\r\n    bgClass,\r\n    description,\r\n    title,\r\n    stats,\r\n    trend,\r\n}: StatisticsChartWidgetProps) => {\r\n    //  default options\r\n    const options: ApexOptions = {\r\n        chart: {\r\n            sparkline: {\r\n                enabled: true,\r\n            },\r\n        },\r\n        plotOptions: {\r\n            bar: {\r\n                columnWidth: '60%',\r\n            },\r\n        },\r\n        xaxis: {\r\n            crosshairs: {\r\n                width: 1,\r\n            },\r\n        },\r\n        stroke: {\r\n            width: 2,\r\n            curve: 'smooth',\r\n        },\r\n        colors: colors || ['#008FFB'],\r\n        tooltip: {\r\n            fixed: {\r\n                enabled: false,\r\n            },\r\n            x: {\r\n                show: false,\r\n            },\r\n            y: {\r\n                title: {\r\n                    formatter: function (seriesName: string) {\r\n                        return '';\r\n                    },\r\n                },\r\n            },\r\n            marker: {\r\n                show: false,\r\n            },\r\n        },\r\n    };\r\n\r\n    // chart data\r\n    const series = [{ name: name || 'Data', data: data || [] }];\r\n\r\n    return (\r\n        <Card className={classNames('widget-flat', bgClass)}>\r\n            <Card.Body>\r\n                <Row className=\"align-items-center\">\r\n                    <Col className=\"col-6\">\r\n                        <h5\r\n                            className={classNames(\r\n                                'fw-normal',\r\n                                'mt-0',\r\n                                'text-truncate',\r\n                                textClass ? textClass : 'text-muted'\r\n                            )}\r\n                            title={description}\r\n                        >\r\n                            {title}\r\n                        </h5>\r\n                        <h3 className=\"my-2 py-1\">{stats}</h3>\r\n\r\n                        {trend && (\r\n                            <p className={classNames('mb-0', textClass ? textClass : 'text-muted')}>\r\n                                <span className={classNames(trend.textClass, 'me-2')}>\r\n                                    <i className={trend.icon}></i> {trend.value}\r\n                                </span>\r\n                            </p>\r\n                        )}\r\n                    </Col>\r\n\r\n                    <Col className=\"col-6\">\r\n                        <div className=\"text-end\">\r\n                            <Chart\r\n                                className=\"apex-charts\"\r\n                                options={options}\r\n                                series={series}\r\n                                type={type || 'bar'}\r\n                                height={60}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default StatisticsChartWidget;\r\n","import { Card } from 'react-bootstrap';\r\nimport Chart from 'react-apexcharts';\r\nimport { ApexOptions } from 'apexcharts';\r\n\r\ntype StatisticsChartWidget2Props = {\r\n    title?: string;\r\n    subtitle?: string;\r\n    type?: 'line' | 'bar' | 'area';\r\n    colors?: Array<string>;\r\n    name?: string;\r\n    data?: Array<number>;\r\n};\r\n\r\n/**\r\n * Renders the chart in widget area\r\n */\r\nconst StatisticsChartWidget2 = ({ title, subtitle, type, colors, name, data }: StatisticsChartWidget2Props) => {\r\n    // default options\r\n    const options: ApexOptions = {\r\n        chart: {\r\n            sparkline: {\r\n                enabled: true,\r\n            },\r\n        },\r\n        stroke: {\r\n            width: 2,\r\n            curve: 'straight',\r\n        },\r\n        colors: colors || ['#008FFB'],\r\n        title: {\r\n            text: title,\r\n            offsetX: 20,\r\n            offsetY: 20,\r\n            style: {\r\n                fontSize: '24px',\r\n            },\r\n        },\r\n        subtitle: {\r\n            text: subtitle,\r\n            offsetX: 20,\r\n            offsetY: 55,\r\n            style: {\r\n                fontSize: '14px',\r\n            },\r\n        },\r\n    };\r\n\r\n    // chart data\r\n    const series = [{ name: name || 'Data', data: data || [] }];\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body className=\"p-0\">\r\n                <Chart className=\"apex-charts\" options={options} series={series} type={type || 'bar'} height={172} />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default StatisticsChartWidget2;\r\n","import { Row, Col, Card } from 'react-bootstrap';\r\nimport Chart from 'react-apexcharts';\r\nimport { ApexOptions } from 'apexcharts';\r\nimport classNames from 'classnames';\r\n\r\ntype StatisticsChartWidget3Props = {\r\n    title?: string;\r\n    stats?: string;\r\n    lastMonthData?: string;\r\n    currentMonthData?: string;\r\n    type?: 'line' | 'bar';\r\n    colors?: Array<string>;\r\n    name?: string;\r\n    strokeWidth?: number;\r\n    borderRadius?: number;\r\n    data?: Array<number>;\r\n};\r\n\r\n/**\r\n * Renders the chart in widget area\r\n */\r\nconst StatisticsChartWidget3 = ({\r\n    title,\r\n    stats,\r\n    lastMonthData,\r\n    currentMonthData,\r\n    type,\r\n    colors,\r\n    name,\r\n    strokeWidth,\r\n    borderRadius,\r\n    data,\r\n}: StatisticsChartWidget3Props) => {\r\n    // chart options\r\n    const options: ApexOptions = {\r\n        chart: {\r\n            sparkline: {\r\n                enabled: true,\r\n            },\r\n        },\r\n        stroke: {\r\n            width: strokeWidth,\r\n            curve: 'smooth',\r\n        },\r\n        plotOptions: {\r\n            bar: {\r\n                borderRadius: borderRadius,\r\n            },\r\n        },\r\n        colors: colors || ['#008FFB'],\r\n    };\r\n\r\n    // chart data\r\n    const series = [{ name: name || 'Data', data: data || [] }];\r\n\r\n    return (\r\n        <Card className=\"widget-flat\">\r\n            <Card.Body>\r\n                <div className=\"float-end\">\r\n                    <button type=\"button\" className=\"btn btn-sm btn-light\">\r\n                        View\r\n                    </button>\r\n                </div>\r\n                <h6 className=\"text-muted text-uppercase mt-0\" title=\"Revenue\">\r\n                    {title}\r\n                </h6>\r\n                <h3 className=\"mb-4 mt-2\">{stats}</h3>\r\n\r\n                <Chart\r\n                    className=\"apex-charts mb-3\"\r\n                    options={options}\r\n                    series={series}\r\n                    type={type || 'bar'}\r\n                    height={100}\r\n                />\r\n\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <h6 className=\"text-truncate d-block\">Last Month</h6>\r\n                        <p\r\n                            className={classNames(\r\n                                'font-18',\r\n                                'mb-0',\r\n                                { 'text-success': lastMonthData?.startsWith('+') },\r\n                                { 'text-danger': lastMonthData?.startsWith('-') }\r\n                            )}\r\n                        >\r\n                            {lastMonthData}\r\n                        </p>\r\n                    </Col>\r\n                    <Col>\r\n                        <h6 className=\"text-truncate d-block\">Current Month</h6>\r\n                        <p\r\n                            className={classNames(\r\n                                'font-18',\r\n                                'mb-0',\r\n                                { 'text-danger': currentMonthData?.startsWith('-') },\r\n                                { 'text-success': currentMonthData?.startsWith('+') }\r\n                            )}\r\n                        >\r\n                            {currentMonthData}\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default StatisticsChartWidget3;\r\n","import { Card } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\ntype StatisticsWidgetProps = {\r\n    textClass?: string;\r\n    bgClass?: string;\r\n    icon?: string;\r\n    title: string;\r\n    description: string;\r\n    stats?: string;\r\n    trend: {\r\n        textClass?: string;\r\n        icon?: string;\r\n        value?: string;\r\n        time?: string;\r\n    };\r\n};\r\n\r\nconst StatisticsWidget = ({ textClass, bgClass, icon, title, stats, trend, description }: StatisticsWidgetProps) => {\r\n    return (\r\n        <Card className={classNames('widget-flat', bgClass)}>\r\n            <Card.Body>\r\n                {icon && (\r\n                    <div className=\"float-end\">\r\n                        <i className={classNames(icon, 'widget-icon')}></i>\r\n                    </div>\r\n                )}\r\n                <h5\r\n                    className={classNames('fw-normal', 'mt-0', textClass ? textClass : 'text-muted')}\r\n                    title={description}\r\n                >\r\n                    {title}\r\n                </h5>\r\n                <h3 className={classNames('mt-3', 'mb-3', textClass ? textClass : null)}>{stats}</h3>\r\n\r\n                {trend && (\r\n                    <p className={classNames('mb-0', textClass ? textClass : 'text-muted')}>\r\n                        <span className={classNames(trend.textClass, 'me-2')}>\r\n                            <i className={classNames(trend.icon)}></i> {trend.value}\r\n                        </span>\r\n                        <span className=\"text-nowrap\">{trend.time}</span>\r\n                    </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default StatisticsWidget;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype TimelineProps = {\r\n    tag?: React.ElementType;\r\n    className?: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst Timeline = ({ className, children, tag = 'div' }: TimelineProps) => {\r\n    const Tag: React.ElementType = tag;\r\n\r\n    return <Tag className={classNames('timeline-alt', 'py-0', className)}>{children}</Tag>;\r\n};\r\n\r\nexport default Timeline;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype TimelineProps = {\r\n    tag?: React.ElementType;\r\n    className?: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst TimelineItem = ({ className, children, tag = 'div' }: TimelineProps) => {\r\n    const Tag: React.ElementType = tag;\r\n\r\n    return <Tag className={classNames('timeline-item', className)}>{children}</Tag>;\r\n};\r\n\r\nexport default TimelineItem;\r\n"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","useToggle","showPassword","togglePassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","label","labelClassName","containerClass","otherProps","rows","comp","Pagination","tableProps","sizePerPageList","useState","pageCount","setPageCount","state","pageIndex","setPageIndex","useEffect","filterPages","useCallback","visiblePages","totalPages","filter","page","getVisiblePages","total","changePage","setVisiblePages","gotoPage","activePage","length","value","pageSize","onChange","e","setPageSize","Number","target","index","text","toString","pageOptions","min","disabled","to","array","active","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","setValue","useAsyncDebounce","undefined","IndeterminateCheckbox","forwardRef","indeterminate","rest","defaultRef","useRef","resolvedRef","current","htmlFor","Table","isSearchable","isSortable","pagination","isSelectable","isExpandable","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","dataTable","useTable","columns","data","initialState","hasOwnProperty","hooks","visibleColumns","push","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","defaultCanSort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","i","prepareRow","getRowProps","cells","cell","getCellProps","changeLayoutType","layoutType","layoutConstants","LAYOUT_VERTICAL","checked","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","LAYOUT_FULL","changeLayoutColorScheme","layoutColor","LAYOUT_COLOR_LIGHT","LAYOUT_COLOR_DARK","changeWidthMode","layoutWidth","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","changeLeftSidebarTheme","leftSideBarTheme","LEFT_SIDEBAR_THEME_DEFAULT","LEFT_SIDEBAR_THEME_LIGHT","LEFT_SIDEBAR_THEME_DARK","changeLeftSiderbarType","leftSideBarType","LEFT_SIDEBAR_TYPE_FIXED","LEFT_SIDEBAR_TYPE_CONDENSED","LEFT_SIDEBAR_TYPE_SCROLLABLE","useRedux","dispatch","appSelector","Layout","disableLayoutWidth","setDisableLayoutWidth","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","_loadStateFromProps","changeLayout","changeLayoutColor","changeLayoutWidth","changeSidebarTheme","changeSidebarType","reset","useThemeCustomizer","role","useVectorMap","options","selectorId","Date","getTime","setMap","window","selector","width","height","onNewMessagesPosted","schemaResolver","yupResolver","yup","shape","newMessage","required","handleValidMessageSubmit","callback","useChatForm","Row","Col","ChatItemAvatar","userAvatar","postedOn","src","alt","ChatItemText","userName","ChatItem","placement","odd","ChatList","chatMessages","messages","setMessages","handleNewMessagePosted","message","concat","getHours","getMinutes","useChatList","Card","title","menuItems","maxHeight","userPic","FAQs","rawFaqs","ques","lg","span","offset","titleClass","question","textClass","answer","PricingCard","plans","plan","md","isRecommended","icon","price","duration","features","feature","index1","FileUploader","showPreview","onFileUpload","selectedFiles","setSelectedFiles","handleAcceptedFiles","files","allFiles","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","formatBytes","size","bytes","decimals","k","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","removeFile","newFiles","splice","indexOf","useFileUploader","onDrop","acceptedFiles","getRootProps","getInputProps","f","collapse","toggleContent","isHidden","remove","loading","setLoading","setTimeout","random","usePortlet","reloadContent","Collapse","in","Dropdown","Link","align","item","hasDivider","variant","addTodo","done","todoData","setTodoData","newTodo","archiveTodos","toggleTodo","todoItem","newTodoData","todo","saveTodo","getInprogressTodos","useTodoList","Button","DatepickerInput","console","DatepickerInputWithAddon","readOnly","input","hideAddon","inputClass","customInput","timeIntervals","tI","selected","date","showTimeSelect","timeFormat","timeCaption","dateFormat","minDate","maxDate","monthsShown","showTimeSelectOnly","inline","profileImg","avatar1","avatar2","avatar3","avatar6","breadCrumbItems","Breadcrumb","listProps","href","path","tag","rating","emptyStars","Tag","x","OverlayTrigger","overlay","Tooltip","color","colors","bgClass","description","stats","trend","chart","sparkline","enabled","plotOptions","bar","columnWidth","xaxis","crosshairs","stroke","curve","tooltip","fixed","show","y","formatter","seriesName","marker","series","subtitle","offsetX","offsetY","fontSize","lastMonthData","currentMonthData","strokeWidth","borderRadius","startsWith","time"],"sourceRoot":""}
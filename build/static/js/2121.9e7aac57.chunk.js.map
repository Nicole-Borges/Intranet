{"version":3,"file":"static/js/2121.9e7aac57.chunk.js","mappings":"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","sources":["pages/uikit/Modals.tsx","pages/uikit/hooks/useModal.ts","pages/uikit/hooks/useRangeSlider.ts","../node_modules/dom-helpers/esm/scrollbarSize.js","../node_modules/react-bootstrap/esm/ModalBody.js","../node_modules/react-bootstrap/esm/ModalDialog.js","../node_modules/react-bootstrap/esm/ModalFooter.js","../node_modules/react-bootstrap/esm/ModalHeader.js","../node_modules/react-bootstrap/esm/ModalTitle.js","../node_modules/react-bootstrap/esm/Modal.js"],"sourcesContent":["import { Row, Col, Card, Button, Modal } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport { useToggle } from 'hooks';\r\nimport { PageTitle } from 'components';\r\nimport logodark from 'assets/images/logo-dark.png';\r\nimport { useModal } from './hooks';\r\n\r\nconst ModalSizes = () => {\r\n    const [isStandardOpen, toggleStandard] = useToggle();\r\n    const { isOpen, size, className, scroll, toggleModal, openModalWithSize, openModalWithClass, openModalWithScroll } =\r\n        useModal();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Bootstrap Modals</h4>\r\n                <p className=\"sub-header\">A rendered modal with header, body, and set of actions in the footer.</p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button onClick={toggleStandard}>Standard Modal</Button>\r\n                    <Button variant=\"info\" onClick={() => openModalWithSize('lg')}>\r\n                        Large Modal\r\n                    </Button>\r\n                    <Button variant=\"success\" onClick={() => openModalWithSize('sm')}>\r\n                        Small Modal\r\n                    </Button>\r\n                    <Button onClick={() => openModalWithClass('modal-full-width')}>Full width Modal</Button>\r\n                    <Button variant=\"secondary\" onClick={openModalWithScroll}>\r\n                        Scrollable Modal\r\n                    </Button>\r\n                </div>\r\n\r\n                {/* standard modal */}\r\n                <Modal show={isStandardOpen} onHide={toggleStandard}>\r\n                    <Modal.Header onHide={toggleStandard} closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h6>Text in a modal</h6>\r\n                        <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\r\n                        <hr />\r\n                        <h6>Overflowing text to show scroll behavior</h6>\r\n                        <p>\r\n                            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                            egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                        </p>\r\n                        <p>\r\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\r\n                            vel augue laoreet rutrum faucibus dolor auctor.\r\n                        </p>\r\n                        <p>\r\n                            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\r\n                            scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\r\n                            auctor fringilla.\r\n                        </p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"light\" onClick={toggleStandard}>\r\n                            Close\r\n                        </Button>{' '}\r\n                        <Button onClick={toggleStandard}>Save changes</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal} dialogClassName={className} size={size} scrollable={scroll}>\r\n                    <Modal.Header onHide={toggleModal} closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h6>Text in a modal</h6>\r\n                        <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\r\n                        <hr />\r\n                        <h6>Overflowing text to show scroll behavior</h6>\r\n                        <p>\r\n                            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                            egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                        </p>\r\n                        <p>\r\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\r\n                            vel augue laoreet rutrum faucibus dolor auctor.\r\n                        </p>\r\n                        <p>\r\n                            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\r\n                            scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\r\n                            auctor fringilla.\r\n                        </p>\r\n                        {scroll && (\r\n                            <>\r\n                                <p>\r\n                                    Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac\r\n                                    facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac,\r\n                                    vestibulum at eros.\r\n                                </p>\r\n                                <p>\r\n                                    Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis\r\n                                    lacus vel augue laoreet rutrum faucibus dolor auctor.\r\n                                </p>\r\n                            </>\r\n                        )}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"light\" onClick={toggleModal}>\r\n                            Close\r\n                        </Button>{' '}\r\n                        <Button onClick={toggleModal}>Save changes</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ModalsWithPages = () => {\r\n    const [signUpModal, toggleSignUp] = useToggle();\r\n    const [signInModal, toggleSignIn] = useToggle();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Modal with Pages</h4>\r\n\r\n                <p className=\"text-muted\">Examples of custom modals.</p>\r\n\r\n                <Button variant=\"primary\" className=\"me-1\" onClick={toggleSignUp}>\r\n                    Sign Up Modal\r\n                </Button>\r\n\r\n                <Button variant=\"info\" onClick={toggleSignIn}>\r\n                    Log In Modal\r\n                </Button>\r\n\r\n                {/* Sign up Modal */}\r\n                <Modal show={signUpModal} onHide={toggleSignUp}>\r\n                    <Modal.Body>\r\n                        <div className=\"text-center mt-2 mb-4\">\r\n                            <Link to=\"#\">\r\n                                <span>\r\n                                    <img src={logodark} alt=\"\" height=\"18\" />\r\n                                </span>\r\n                            </Link>\r\n                        </div>\r\n                        <form className=\"ps-3 pe-3\" action=\"#\">\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"username\" className=\"form-label\">\r\n                                    Name\r\n                                </label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    id=\"username\"\r\n                                    required\r\n                                    placeholder=\"Michael Zenaty\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"emailaddress\" className=\"form-label\">\r\n                                    Email address\r\n                                </label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    id=\"emailaddress\"\r\n                                    required\r\n                                    placeholder=\"john@deo.com\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"password\" className=\"form-label\">\r\n                                    Password\r\n                                </label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    required\r\n                                    id=\"password\"\r\n                                    placeholder=\"Enter your password\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"mb-3\">\r\n                                <div className=\"form-check\">\r\n                                    <input type=\"checkbox\" className=\"form-check-input\" id=\"customCheck1\" />\r\n                                    <label className=\"form-check-label\" htmlFor=\"customCheck1\">\r\n                                        I accept <Link to=\"#\">Terms and Conditions</Link>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mb-3 text-center\">\r\n                                <button className=\"btn btn-primary\" type=\"submit\">\r\n                                    Sign Up Free\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n                {/* Sign in Modal */}\r\n                <Modal show={signInModal} onHide={toggleSignIn}>\r\n                    <Modal.Body>\r\n                        <div className=\"text-center mt-2 mb-4\">\r\n                            <Link to=\"#\">\r\n                                <span>\r\n                                    <img src={logodark} alt=\"\" height=\"18\" />\r\n                                </span>\r\n                            </Link>\r\n                        </div>\r\n                        <form className=\"ps-3 pe-3\" action=\"#\">\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"emailaddress\" className=\"form-label\">\r\n                                    Email address\r\n                                </label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"email\"\r\n                                    id=\"emailaddress\"\r\n                                    required\r\n                                    placeholder=\"john@deo.com\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"mb-3\">\r\n                                <label htmlFor=\"password\" className=\"form-label\">\r\n                                    Password\r\n                                </label>\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"password\"\r\n                                    required\r\n                                    id=\"password\"\r\n                                    placeholder=\"Enter your password\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"mb-3\">\r\n                                <div className=\"form-check\">\r\n                                    <input type=\"checkbox\" className=\"form-check-input\" id=\"customCheck1\" />\r\n                                    <label className=\"form-check-label\" htmlFor=\"customCheck1\">\r\n                                        Remember me\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mb-3 text-center\">\r\n                                <button className=\"btn btn-rounded btn-primary\" type=\"submit\">\r\n                                    Sign In\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ModalWithAlerts = () => {\r\n    const { isOpen, className, toggleModal, openModalWithClass } = useModal();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Modal based Alerts</h4>\r\n\r\n                <p className=\"text-muted\">Show different contexual alert messages using modal component.</p>\r\n\r\n                <Button variant=\"success\" className=\"me-1\" onClick={() => openModalWithClass('success')}>\r\n                    Success Alert\r\n                </Button>\r\n                <Button variant=\"info\" className=\"me-1\" onClick={() => openModalWithClass('info')}>\r\n                    Info Alert\r\n                </Button>\r\n                <Button variant=\"warning\" className=\"me-1\" onClick={() => openModalWithClass('warning')}>\r\n                    Warning Alert\r\n                </Button>\r\n                <Button variant=\"danger\" className=\"me-1\" onClick={() => openModalWithClass('danger')}>\r\n                    Danger Alert\r\n                </Button>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal} size=\"sm\">\r\n                    <div className={classNames('modal-filled', 'bg-' + className)}>\r\n                        <Modal.Body className=\"p-4\">\r\n                            <div className=\"text-center\">\r\n                                <i className=\"dripicons-checkmark h1\"></i>\r\n                                <h4 className=\"mt-2\">Well Done!</h4>\r\n                                <p className=\"mt-3\">\r\n                                    Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac\r\n                                    facilisis in, egestas eget quam.\r\n                                </p>\r\n                                <Button variant=\"light\" className=\"my-2\" onClick={toggleModal}>\r\n                                    Continue\r\n                                </Button>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </div>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ModalPositions = () => {\r\n    const { isOpen, className, toggleModal, openModalWithClass } = useModal();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Modal Position</h4>\r\n\r\n                <p className=\"text-muted\">\r\n                    Specify the position for the modal. You can display modal at top, bottom, center or right of page by\r\n                    specifying classes <code>modal-top</code>, <code>modal-bottom</code>,{' '}\r\n                    <code>modal-dialog-centered</code> and <code>modal-right</code>\r\n                    respectively.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button variant=\"secondary\" onClick={() => openModalWithClass('modal-top')}>\r\n                        Top\r\n                    </Button>\r\n                    <Button variant=\"secondary\" onClick={() => openModalWithClass('modal-right')}>\r\n                        Right\r\n                    </Button>\r\n                    <Button variant=\"secondary\" onClick={() => openModalWithClass('modal-bottom')}>\r\n                        Bottom\r\n                    </Button>\r\n                    <Button variant=\"secondary\" onClick={() => openModalWithClass('modal-dialog-centered')}>\r\n                        Center\r\n                    </Button>\r\n                </div>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal} dialogClassName={className}>\r\n                    <Modal.Header onHide={toggleModal} closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h5>Text in a modal</h5>\r\n                        <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"light\" onClick={toggleModal}>\r\n                            Close\r\n                        </Button>{' '}\r\n                        <Button variant=\"primary\" onClick={toggleModal}>\r\n                            Save changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ModalWithColoredHeader = () => {\r\n    const { isOpen, className, toggleModal, openModalWithClass } = useModal();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Colored Header Modals</h4>\r\n\r\n                <p className=\"text-muted\">A rendered modal with header having contexual background color.</p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button variant=\"primary\" onClick={() => openModalWithClass('primary')}>\r\n                        Primary Header\r\n                    </Button>\r\n                    <Button variant=\"success\" onClick={() => openModalWithClass('success')}>\r\n                        Success Header\r\n                    </Button>\r\n                    <Button variant=\"info\" onClick={() => openModalWithClass('info')}>\r\n                        Info Header\r\n                    </Button>\r\n                    <Button variant=\"danger\" onClick={() => openModalWithClass('danger')}>\r\n                        Danger Header\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={() => openModalWithClass('warning')}>\r\n                        Warning Header\r\n                    </Button>\r\n                    <Button variant=\"dark\" onClick={() => openModalWithClass('dark')}>\r\n                        Dark Header\r\n                    </Button>\r\n                </div>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal}>\r\n                    <Modal.Header\r\n                        onHide={toggleModal}\r\n                        closeButton\r\n                        className={classNames('modal-colored-header', 'bg-' + className)}\r\n                    >\r\n                        <h4 className=\"modal-title text-light\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h5 className=\"mt-0\">{className} Background</h5>\r\n                        <p>\r\n                            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                            egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                        </p>\r\n                        <p>\r\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\r\n                            vel augue laoreet rutrum faucibus dolor auctor.\r\n                        </p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"light\" onClick={toggleModal}>\r\n                            Close\r\n                        </Button>{' '}\r\n                        <Button variant={className} onClick={toggleModal}>\r\n                            Save changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ModalWithFilled = () => {\r\n    const { isOpen, className, toggleModal, openModalWithClass } = useModal();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Filled Modals</h4>\r\n\r\n                <p className=\"text-muted\">\r\n                    A rendered modal with header, body and footer having contexual background color.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button variant=\"primary\" onClick={() => openModalWithClass('primary')}>\r\n                        Primary Filled\r\n                    </Button>\r\n                    <Button variant=\"success\" onClick={() => openModalWithClass('success')}>\r\n                        Success Filled\r\n                    </Button>\r\n                    <Button variant=\"info\" onClick={() => openModalWithClass('info')}>\r\n                        Info Filled\r\n                    </Button>\r\n                    <Button variant=\"danger\" onClick={() => openModalWithClass('danger')}>\r\n                        Danger Filled\r\n                    </Button>\r\n                    <Button variant=\"warning\" onClick={() => openModalWithClass('warning')}>\r\n                        Warning Filled\r\n                    </Button>\r\n                    <Button variant=\"dark\" onClick={() => openModalWithClass('dark')}>\r\n                        Dark Filled\r\n                    </Button>\r\n                </div>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal}>\r\n                    <Modal.Header\r\n                        onHide={toggleModal}\r\n                        closeButton\r\n                        className={classNames('modal-filled', 'bg-' + className)}\r\n                    >\r\n                        <h4 className=\"modal-title text-light\">{className} Filled Modal</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body className={classNames('modal-filled', 'bg-' + className, 'text-light')}>\r\n                        <p>\r\n                            Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                            egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                        </p>\r\n                        <p>\r\n                            Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\r\n                            vel augue laoreet rutrum faucibus dolor auctor.\r\n                        </p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer className={classNames('modal-filled', 'bg-' + className)}>\r\n                        <Button variant=\"light\" onClick={toggleModal}>\r\n                            Close\r\n                        </Button>{' '}\r\n                        <Button variant=\"outline-light\" onClick={toggleModal}>\r\n                            Save changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst MultipleModal = () => {\r\n    const [isOpen, toggleModal] = useToggle();\r\n    const [isNextOpen, toggleNextModal] = useToggle();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Multiple Modal</h4>\r\n\r\n                <p className=\"text-muted\">\r\n                    Display a series of modals one by one to guide your users on multiple aspects or take step wise\r\n                    input.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button onClick={toggleModal}>Multiple Modal</Button>\r\n                </div>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal}>\r\n                    <Modal.Header closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h5>Text in a modal</h5>\r\n                        <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            variant=\"primary\"\r\n                            onClick={() => {\r\n                                toggleModal();\r\n                                toggleNextModal();\r\n                            }}\r\n                        >\r\n                            Next\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Modal show={isNextOpen} onHide={toggleNextModal}>\r\n                    <Modal.Header closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h5>Text in a modal</h5>\r\n                        <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={toggleNextModal}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ToggleBetweenModals = () => {\r\n    const [isOpen, toggleModal] = useToggle();\r\n    const [isNextOpen, toggleNextModal] = useToggle();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Toggle Between Modals</h4>\r\n                <p className=\"sub-header\">\r\n                    Display a series of modals one by one to guide your users on multiple aspects or take step wise\r\n                    input.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button variant=\"secondary\" onClick={toggleModal}>\r\n                        Open first modal\r\n                    </Button>\r\n                </div>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal} centered>\r\n                    <Modal.Header closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Show a second modal and hide this one with the button below.</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            onClick={() => {\r\n                                toggleModal();\r\n                                toggleNextModal();\r\n                            }}\r\n                        >\r\n                            Open second modal\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Modal show={isNextOpen} onHide={toggleNextModal} centered>\r\n                    <Modal.Header closeButton>\r\n                        <h4 className=\"modal-title\">Modal Heading</h4>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Hide this modal and show the first with the button below.</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            onClick={() => {\r\n                                toggleModal();\r\n                                toggleNextModal();\r\n                            }}\r\n                        >\r\n                            Back to first\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst StaticBackdropModal = () => {\r\n    const [isOpen, toggleModal] = useToggle();\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Static Backdrop</h4>\r\n\r\n                <p className=\"text-muted\">\r\n                    When backdrop is set to static, the modal will not close when clicking outside it. Click the button\r\n                    below to try it.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    <Button variant=\"info\" onClick={toggleModal}>\r\n                        Static Backdrop\r\n                    </Button>\r\n                </div>\r\n\r\n                <Modal show={isOpen} onHide={toggleModal} backdrop=\"static\" keyboard={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Modal title</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        I will not close if you click outside me. Don't even try to press escape key.\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={toggleModal}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\">Understood</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Modals = () => {\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Base UI', path: '/ui/modals' },\r\n                    { label: 'Modals', path: '/ui/modals', active: true },\r\n                ]}\r\n                title={'Modals'}\r\n            />\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <ModalSizes />\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <ModalsWithPages />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <ModalWithAlerts />\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <ModalPositions />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <ModalWithColoredHeader />\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <ModalWithFilled />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <MultipleModal />\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <ToggleBetweenModals />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={6}>\r\n                    <StaticBackdropModal />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modals;\r\n","import { useToggle } from 'hooks';\r\nimport { useState } from 'react';\r\n\r\nexport default function useModal() {\r\n    const [isOpen, toggleModal] = useToggle();\r\n\r\n    const [size, setSize] = useState<'sm' | 'lg' | 'xl'>();\r\n    const [className, setClassName] = useState<string>('');\r\n    const [scroll, setScroll] = useState<boolean>(false);\r\n\r\n    // Opens large modal\r\n    const openModalWithSize = (size: 'sm' | 'lg' | 'xl') => {\r\n        setSize(size);\r\n        setClassName('');\r\n        setScroll(false);\r\n        toggleModal();\r\n    };\r\n\r\n    // Opens modal with custom class\r\n    const openModalWithClass = (className: string) => {\r\n        setClassName(className);\r\n        setScroll(false);\r\n        toggleModal();\r\n    };\r\n\r\n    // Opens large modal\r\n    const openModalWithScroll = () => {\r\n        setScroll(true);\r\n        setSize('sm');\r\n        setClassName('');\r\n        toggleModal();\r\n    };\r\n\r\n    return {\r\n        isOpen,\r\n        size,\r\n        className,\r\n        scroll,\r\n        toggleModal,\r\n        openModalWithSize,\r\n        openModalWithClass,\r\n        openModalWithScroll,\r\n    };\r\n}\r\n","import { useState } from 'react';\r\n\r\ntype SelectedValsType = {\r\n    [key: number]: { textValue: number; percent: number };\r\n};\r\n\r\ntype SelectedRangesType = {\r\n    [key: number]: string;\r\n};\r\n\r\nexport default function useRangeSlider() {\r\n    const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\r\n        '1': { textValue: 20, percent: 20 },\r\n        '2': { textValue: 20, percent: 20 },\r\n    });\r\n    const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\r\n        '1': '20-45',\r\n        '2': '20-45',\r\n    });\r\n\r\n    const onSlide = (index: number, value: number[], percent: number[]) => {\r\n        let selectedValues = { ...selectedVals };\r\n        selectedValues[index] = {\r\n            textValue: Number(value[0].toFixed(2)),\r\n            percent: Number(percent[0].toFixed(2)),\r\n        };\r\n        setSelectedVals(selectedValues);\r\n    };\r\n\r\n    const onSlide2 = (index: number, value: number[]) => {\r\n        let selectedRange = { ...selectedRanges };\r\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\r\n        setSelectedRanges(selectedRange);\r\n    };\r\n\r\n    return {\r\n        selectedVals,\r\n        selectedRanges,\r\n        onSlide,\r\n        onSlide2,\r\n    };\r\n}\r\n","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-body');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalDialog = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  contentClassName,\n  centered,\n  size,\n  fullscreen,\n  children,\n  scrollable,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const dialogClass = `${bsPrefix}-dialog`;\n  const fullScreenClass = typeof fullscreen === 'string' ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;\n  return /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classNames(`${bsPrefix}-content`, contentClassName),\n      children: children\n    })\n  });\n});\nModalDialog.displayName = 'ModalDialog';\nexport default ModalDialog;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-footer');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractModalHeader from './AbstractModalHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: false\n};\nconst ModalHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-header');\n  return /*#__PURE__*/_jsx(AbstractModalHeader, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix)\n  });\n});\nModalHeader.displayName = 'ModalHeader';\nModalHeader.defaultProps = defaultProps;\nexport default ModalHeader;","import createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nconst DivStyledAsH4 = divWithClassName('h4');\nexport default createWithBsPrefix('modal-title', {\n  Component: DivStyledAsH4\n});","import classNames from 'classnames';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport removeEventListener from 'dom-helpers/removeEventListener';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nimport * as React from 'react';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport BaseModal from '@restart/ui/Modal';\nimport { getSharedManager } from './BootstrapModalManager';\nimport Fade from './Fade';\nimport ModalBody from './ModalBody';\nimport ModalContext from './ModalContext';\nimport ModalDialog from './ModalDialog';\nimport ModalFooter from './ModalFooter';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  show: false,\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  restoreFocus: true,\n  animation: true,\n  dialogAs: ModalDialog\n};\n/* eslint-disable no-use-before-define, react/no-multi-comp */\n\nfunction DialogTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props,\n    timeout: null\n  });\n}\n\nfunction BackdropTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props,\n    timeout: null\n  });\n}\n/* eslint-enable no-use-before-define */\n\n\nconst Modal = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  style,\n  dialogClassName,\n  contentClassName,\n  children,\n  dialogAs: Dialog,\n  'aria-labelledby': ariaLabelledby,\n\n  /* BaseModal props */\n  show,\n  animation,\n  backdrop,\n  keyboard,\n  onEscapeKeyDown,\n  onShow,\n  onHide,\n  container,\n  autoFocus,\n  enforceFocus,\n  restoreFocus,\n  restoreFocusOptions,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  backdropClassName,\n  manager: propsManager,\n  ...props\n}, ref) => {\n  const [modalStyle, setStyle] = useState({});\n  const [animateStaticModal, setAnimateStaticModal] = useState(false);\n  const waitingForMouseUpRef = useRef(false);\n  const ignoreBackdropClickRef = useRef(false);\n  const removeStaticModalAnimationRef = useRef(null);\n  const [modal, setModalRef] = useCallbackRef();\n  const mergedRef = useMergedRefs(ref, setModalRef);\n  const handleHide = useEventCallback(onHide);\n  const isRTL = useIsRTL();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const modalContext = useMemo(() => ({\n    onHide: handleHide\n  }), [handleHide]);\n\n  function getModalManager() {\n    if (propsManager) return propsManager;\n    return getSharedManager({\n      isRTL\n    });\n  }\n\n  function updateDialogStyle(node) {\n    if (!canUseDOM) return;\n    const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;\n    const modalIsOverflowing = node.scrollHeight > ownerDocument(node).documentElement.clientHeight;\n    setStyle({\n      paddingRight: containerIsOverflowing && !modalIsOverflowing ? getScrollbarSize() : undefined,\n      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? getScrollbarSize() : undefined\n    });\n  }\n\n  const handleWindowResize = useEventCallback(() => {\n    if (modal) {\n      updateDialogStyle(modal.dialog);\n    }\n  });\n  useWillUnmount(() => {\n    removeEventListener(window, 'resize', handleWindowResize);\n    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();\n  }); // We prevent the modal from closing during a drag by detecting where the\n  // the click originates from. If it starts in the modal and then ends outside\n  // don't close.\n\n  const handleDialogMouseDown = () => {\n    waitingForMouseUpRef.current = true;\n  };\n\n  const handleMouseUp = e => {\n    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {\n      ignoreBackdropClickRef.current = true;\n    }\n\n    waitingForMouseUpRef.current = false;\n  };\n\n  const handleStaticModalAnimation = () => {\n    setAnimateStaticModal(true);\n    removeStaticModalAnimationRef.current = transitionEnd(modal.dialog, () => {\n      setAnimateStaticModal(false);\n    });\n  };\n\n  const handleStaticBackdropClick = e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    handleStaticModalAnimation();\n  };\n\n  const handleClick = e => {\n    if (backdrop === 'static') {\n      handleStaticBackdropClick(e);\n      return;\n    }\n\n    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {\n      ignoreBackdropClickRef.current = false;\n      return;\n    }\n\n    onHide == null ? void 0 : onHide();\n  };\n\n  const handleEscapeKeyDown = e => {\n    if (!keyboard && backdrop === 'static') {\n      // Call preventDefault to stop modal from closing in restart ui,\n      // then play our animation.\n      e.preventDefault();\n      handleStaticModalAnimation();\n    } else if (keyboard && onEscapeKeyDown) {\n      onEscapeKeyDown(e);\n    }\n  };\n\n  const handleEnter = (node, isAppearing) => {\n    if (node) {\n      node.style.display = 'block';\n      updateDialogStyle(node);\n    }\n\n    onEnter == null ? void 0 : onEnter(node, isAppearing);\n  };\n\n  const handleExit = node => {\n    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();\n    onExit == null ? void 0 : onExit(node);\n  };\n\n  const handleEntering = (node, isAppearing) => {\n    onEntering == null ? void 0 : onEntering(node, isAppearing); // FIXME: This should work even when animation is disabled.\n\n    addEventListener(window, 'resize', handleWindowResize);\n  };\n\n  const handleExited = node => {\n    if (node) node.style.display = ''; // RHL removes it sometimes\n\n    onExited == null ? void 0 : onExited(node); // FIXME: This should work even when animation is disabled.\n\n    removeEventListener(window, 'resize', handleWindowResize);\n  };\n\n  const renderBackdrop = useCallback(backdropProps => /*#__PURE__*/_jsx(\"div\", { ...backdropProps,\n    className: classNames(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')\n  }), [animation, backdropClassName, bsPrefix]);\n  const baseModalStyle = { ...style,\n    ...modalStyle\n  }; // Sets `display` always block when `animation` is false\n\n  if (!animation) {\n    baseModalStyle.display = 'block';\n  }\n\n  const renderDialog = dialogProps => /*#__PURE__*/_jsx(\"div\", {\n    role: \"dialog\",\n    ...dialogProps,\n    style: baseModalStyle,\n    className: classNames(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`),\n    onClick: backdrop ? handleClick : undefined,\n    onMouseUp: handleMouseUp,\n    \"aria-labelledby\": ariaLabelledby,\n    children: /*#__PURE__*/_jsx(Dialog, { ...props,\n      onMouseDown: handleDialogMouseDown,\n      className: dialogClassName,\n      contentClassName: contentClassName,\n      children: children\n    })\n  });\n\n  return /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalContext,\n    children: /*#__PURE__*/_jsx(BaseModal, {\n      show: show,\n      ref: mergedRef,\n      backdrop: backdrop,\n      container: container,\n      keyboard: true // Always set true - see handleEscapeKeyDown\n      ,\n      autoFocus: autoFocus,\n      enforceFocus: enforceFocus,\n      restoreFocus: restoreFocus,\n      restoreFocusOptions: restoreFocusOptions,\n      onEscapeKeyDown: handleEscapeKeyDown,\n      onShow: onShow,\n      onHide: onHide,\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: onEntered,\n      onExit: handleExit,\n      onExiting: onExiting,\n      onExited: handleExited,\n      manager: getModalManager(),\n      transition: animation ? DialogTransition : undefined,\n      backdropTransition: animation ? BackdropTransition : undefined,\n      renderBackdrop: renderBackdrop,\n      renderDialog: renderDialog\n    })\n  });\n});\nModal.displayName = 'Modal';\nModal.defaultProps = defaultProps;\nexport default Object.assign(Modal, {\n  Body: ModalBody,\n  Header: ModalHeader,\n  Title: ModalTitle,\n  Footer: ModalFooter,\n  Dialog: ModalDialog,\n  TRANSITION_DURATION: 300,\n  BACKDROP_TRANSITION_DURATION: 150\n});"],"names":["ModalSizes","useToggle","isStandardOpen","toggleStandard","useModal","isOpen","size","className","scroll","toggleModal","openModalWithSize","openModalWithClass","openModalWithScroll","onClick","variant","show","onHide","closeButton","dialogClassName","scrollable","ModalsWithPages","signUpModal","toggleSignUp","signInModal","toggleSignIn","to","src","logodark","alt","height","action","htmlFor","type","id","required","placeholder","ModalWithAlerts","classNames","ModalPositions","ModalWithColoredHeader","ModalWithFilled","MultipleModal","isNextOpen","toggleNextModal","ToggleBetweenModals","centered","StaticBackdropModal","backdrop","keyboard","breadCrumbItems","label","path","active","title","md","useState","setSize","setClassName","setScroll","useRangeSlider","textValue","percent","selectedVals","setSelectedVals","selectedRanges","setSelectedRanges","onSlide","index","value","selectedValues","Number","toFixed","onSlide2","selectedRange","scrollbarSize","recalc","canUseDOM","scrollDiv","document","createElement","style","position","top","width","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","createWithBsPrefix","ModalDialog","React","ref","bsPrefix","contentClassName","fullscreen","children","props","useBootstrapPrefix","dialogClass","fullScreenClass","_jsx","displayName","ModalHeader","AbstractModalHeader","defaultProps","closeLabel","DivStyledAsH4","divWithClassName","Component","autoFocus","enforceFocus","restoreFocus","animation","dialogAs","DialogTransition","Fade","timeout","BackdropTransition","Modal","Dialog","ariaLabelledby","onEscapeKeyDown","onShow","container","restoreFocusOptions","onEntered","onExit","onExiting","onEnter","onEntering","onExited","backdropClassName","propsManager","manager","modalStyle","setStyle","animateStaticModal","setAnimateStaticModal","waitingForMouseUpRef","useRef","ignoreBackdropClickRef","removeStaticModalAnimationRef","useCallbackRef","modal","setModalRef","mergedRef","useMergedRefs","handleHide","useEventCallback","isRTL","useIsRTL","modalContext","useMemo","getModalManager","getSharedManager","updateDialogStyle","node","containerIsOverflowing","getScrollbarWidth","modalIsOverflowing","scrollHeight","ownerDocument","documentElement","clientHeight","paddingRight","getScrollbarSize","undefined","paddingLeft","handleWindowResize","dialog","useWillUnmount","removeEventListener","window","current","handleDialogMouseDown","handleMouseUp","e","target","handleStaticModalAnimation","transitionEnd","handleClick","currentTarget","handleStaticBackdropClick","renderBackdrop","useCallback","backdropProps","baseModalStyle","display","ModalContext","BaseModal","preventDefault","isAppearing","addEventListener","transition","backdropTransition","renderDialog","dialogProps","role","onMouseUp","onMouseDown","Object","assign","Body","ModalBody","Header","Title","ModalTitle","Footer","ModalFooter","TRANSITION_DURATION","BACKDROP_TRANSITION_DURATION"],"sourceRoot":""}
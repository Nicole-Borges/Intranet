{"version":3,"file":"static/js/2439.5514a178.chunk.js","mappings":"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","sources":["pages/tables/Basic.tsx","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { Row, Col, Card, Table } from 'react-bootstrap';\r\nimport { PageTitle } from 'components';\r\nimport { TableRecord } from './types';\r\n\r\nconst records: TableRecord[] = [\r\n    { id: 1, firstName: 'Mark', lastName: 'Otto', username: '@mdo' },\r\n    { id: 2, firstName: 'Jacob', lastName: 'Thornton', username: '@fat' },\r\n    { id: 3, firstName: 'Dave', lastName: 'G', username: '@dave' },\r\n    { id: 4, firstName: 'Nik', lastName: 'N', username: '@nikn' },\r\n    { id: 5, firstName: 'Shreyu', lastName: 'Navadiya', username: '@sn' },\r\n];\r\n\r\nconst BasicTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Basic example</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Just use <code>Table</code> element\r\n                </p>\r\n\r\n                <Table className=\"mb-0\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst InverseTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Inverse Table</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    You can also invert the colors—with light text on dark backgrounds—by specifying <code>dark</code>{' '}\r\n                    attribute\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst StripedRowsTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Striped Rows</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add <code>striped</code> attribute to table\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" striped>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst TableHeadOption = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Table head options</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Use one of two modifier classes to make <code>&lt;thead&gt;</code>s appear light or dark gray.\r\n                </p>\r\n\r\n                <Table className=\"table-centered mb-0\">\r\n                    <thead className=\"table-dark\">\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst BorderedTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Bordered table</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add <code>bordered</code> attribute for borders on all sides of the table and cells.\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                            <th className=\"text-center\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                    <td className=\"table-action text-center\">\r\n                                        <Link to=\"#\" className=\"action-icon\">\r\n                                            <i className=\"mdi mdi-delete\"></i>\r\n                                        </Link>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst BorderedColorTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Bordered table</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add <code>.table-bordered</code> & <code>.border-primary</code> can be added to change colors.\r\n                </p>\r\n\r\n                <Table className=\"mb-0 border-primary table-centered\" bordered>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                            <th className=\"text-center\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                    <td className=\"table-action text-center\">\r\n                                        <Link to=\"#\" className=\"action-icon\">\r\n                                            <i className=\"mdi mdi-delete\"></i>\r\n                                        </Link>\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst HoverableTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Hoverable Rows</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add <code>hover</code> attribute to enable a hover state on table rows\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst SmallTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Small table</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Add <code>size=\"sm\"</code> attribute to make tables more compact by cutting cell padding in half\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst ResponsiveTable = () => {\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <h4 className=\"header-title\">Always responsive</h4>\r\n                <p className=\"text-muted font-14\">\r\n                    Across every breakpoint, use <code>responsive</code> attribute to create responsive tables\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Username</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index.toString()}>\r\n                                    <th scope=\"row\">{record.id}</th>\r\n                                    <td>{record.firstName}</td>\r\n                                    <td>{record.lastName}</td>\r\n                                    <td>{record.username}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Tables = () => {\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Tables', path: '/ui/tables/basic' },\r\n                    { label: 'Basic Tables', path: '/ui/tables/basic', active: true },\r\n                ]}\r\n                title={'Basic Tables'}\r\n            />\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <BasicTable />\r\n                </Col>\r\n\r\n                <Col xl={6}>\r\n                    <InverseTable />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <StripedRowsTable />\r\n                </Col>\r\n\r\n                <Col xl={6}>\r\n                    <TableHeadOption />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <HoverableTable />\r\n                </Col>\r\n\r\n                <Col xl={6}>\r\n                    <SmallTable />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xl={6}>\r\n                    <BorderedTable />\r\n                </Col>\r\n\r\n                <Col xl={6}>\r\n                    <BorderedColorTable />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col xs={12}>\r\n                    <ResponsiveTable />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Tables;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;"],"names":["records","id","firstName","lastName","username","BasicTable","className","map","record","index","scope","toString","InverseTable","variant","StripedRowsTable","striped","TableHeadOption","BorderedTable","bordered","to","BorderedColorTable","HoverableTable","hover","SmallTable","size","ResponsiveTable","responsive","breadCrumbItems","label","path","active","title","xl","xs","Table","React","ref","bsPrefix","borderless","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children"],"sourceRoot":""}
{"version":3,"file":"static/js/9313.3636857e.chunk.js","mappings":"0SAsDA,EAtC2B,SAAC,GAAyF,IAAvFA,EAAsF,EAAtFA,YAAaC,EAAyE,EAAzEA,aAAcC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,OAC1E,OACI,+BAEI,gBAAKC,GAAG,WAAR,UACI,SAAC,MAAD,CACIC,YAAY,eACZC,QAAS,CAACC,EAAAA,GAAeC,EAAAA,GAAmBC,EAAAA,GAAgBC,EAAAA,EAAYC,EAAAA,GACxEC,oBAAoB,EACpBC,YAAY,YACZC,WAAY,CACRC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,KAAM,OACNC,KAAM,OACNC,KAAM,QAEVC,cAAe,CACXC,KAAM,kBACNC,OAAQ,QACRC,MAAO,mDAEXC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXzB,OAAQA,EACR0B,UAAW,SAACC,GAAD,OAAuB/B,EAAY+B,IAC9CC,WAAY,SAACD,GAAD,OAAwB9B,EAAa8B,IACjDE,KAAM,SAACF,GAAD,OAAkB7B,EAAO6B,IAC/BG,UAAW,SAACH,GAAD,OAAuB5B,EAAY4B,W,2FC7C5DI,EAA8B,CAChC,CACI9B,GAAI,IACJ+B,MAAO,+BACPC,MAAO,IAAIC,KACXC,UAAW,cAEf,CACIlC,GAAI,IACJ+B,MAAO,mCACPC,OAAO,IAAIC,MAAOE,SAAQ,IAAIF,MAAOG,UAAY,GACjDF,UAAW,WAEf,CACIlC,GAAI,IACJ+B,MAAO,wBACPC,OAAO,IAAIC,MAAOE,SAAQ,IAAIF,MAAOG,UAAY,GACjDC,KAAK,IAAIJ,MAAOE,SAAQ,IAAIF,MAAOG,UAAY,GAC/CF,UAAW,cAEf,CACIlC,GAAI,IACJ+B,MAAO,cACPC,OAAO,IAAIC,MAAOE,SAAQ,IAAIF,MAAOG,UAAY,GACjDC,KAAK,IAAIJ,MAAOE,SAAQ,IAAIF,MAAOG,UAAY,GAC/CF,UAAW,eAKbI,EAAiB,CACnB,CACItC,GAAI,EACJuC,UAAW,eACXL,UAAW,aACXH,MAAO,qBAEX,CACI/B,GAAI,EACJuC,UAAW,YACXL,UAAW,UACXH,MAAO,YAEX,CACI/B,GAAI,EACJuC,UAAW,eACXL,UAAW,aACXH,MAAO,gBAEX,CACI/B,GAAI,EACJuC,UAAW,cACXL,UAAW,YACXH,MAAO,qBCvCf,IAmFA,EAnFqB,SAAC,GAQI,IAPtBS,EAOqB,EAPrBA,OACAC,EAMqB,EANrBA,QACAC,EAKqB,EALrBA,WACAC,EAIqB,EAJrBA,UACAC,EAGqB,EAHrBA,cAIA,EClBW,SACXD,EACAD,EACAG,EACAC,GAGA,OAAgBC,EAAAA,EAAAA,UAAgB,CAC5BhB,OAAgB,OAATY,QAAS,IAATA,OAAA,EAAAA,EAAWZ,QAAS,GAC3BG,WAAoB,OAATS,QAAS,IAATA,OAAA,EAAAA,EAAWT,YAAa,KAFhCc,GAAP,eAQMC,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACfrB,MAAOoB,EAAAA,KAAaE,SAAS,2BAC7BnB,UAAWiB,EAAAA,KAAaE,SAAS,6BAOnCC,GAAUC,EAAAA,EAAAA,IAAQ,CAAEC,cAAeR,EAAOS,SAAUR,IAe1D,MAAO,CACHS,aAVAJ,EAJAI,aAeAC,SAXAL,EAHAK,SAeAC,QAZAN,EAFAM,QAeAC,OAbAP,EADAQ,UAAaD,OAebE,cATkB,SAACC,GACnBtB,EAAaG,EAAcmB,GAAQlB,EAAWkB,KDnBiBC,CAC/DtB,EACAD,EAHiB,EAFrBG,cAEqB,EADrBC,YAEQY,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,QAASC,EAAzC,EAAyCA,OAAQE,EAAjD,EAAiDA,cAOjD,OACI,UAACG,EAAA,EAAD,CAAOC,KAAM3B,EAAQ4B,OAAQ3B,EAAS4B,SAAS,SAASC,UAAU,EAAlE,WACI,SAACJ,EAAA,SAAD,CAAchC,UAAU,4BAA4BqC,aAAW,EAA/D,UACI,SAACL,EAAA,QAAD,CAAalE,GAAG,cAAhB,UACI,8BAAM0C,EAAa,aAAe,gBAAlC,YAGR,SAACwB,EAAA,OAAD,CAAYhC,UAAU,iBAAtB,UACI,kBAAMsC,YAAU,EAACC,KAAK,YAAYzE,GAAG,YAAY0E,SAAUhB,EAAaK,GAAxE,WACI,UAACY,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,SAAC,KAAD,CACIC,KAAK,OACLC,MAAM,aACNN,KAAK,QACLO,YAAY,oBACZC,eAAgB,OAChBtB,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,YAKZ,SAACgB,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,UAAC,KAAD,CACIC,KAAK,SACLC,MAAM,WACNN,KAAK,YACLQ,eAAgB,OAChBtB,SAAUA,EAEVE,OAAQA,EACRD,QAASA,EARb,WAUI,mBAAQsB,MAAM,YAAd,qBACA,mBAAQA,MAAM,aAAd,sBACA,mBAAQA,MAAM,aAAd,sBACA,mBAAQA,MAAM,UAAd,mBACA,mBAAQA,MAAM,UAAd,mBACA,mBAAQA,MAAM,aAAd,uBATI,mBAchB,UAACP,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKO,GAAI,EAAT,SACKzC,GACG,SAAC0C,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS1C,EAAlC,oBAGA,QAER,UAACgC,EAAA,EAAD,CAAKO,GAAI,EAAGjD,UAAU,WAAtB,WACI,SAACkD,EAAA,EAAD,CAAQlD,UAAU,qBAAqBoD,QAAS7C,EAAhD,oBAGA,SAAC2C,EAAA,EAAD,CAAQC,QAAQ,UAAUP,KAAK,SAAS5C,UAAU,kBAAlD,iC,oBEzC5B,EA5CkB,WACd,OACI,iCACI,iBAAKlC,GAAG,kBAAkBkC,UAAU,SAApC,WACI,mBACA,cAAGA,UAAU,aAAb,gEAEEI,GAAkB,IAAIiD,KAAI,SAACvC,EAAOwC,GAChC,OACI,iBAEItD,UAAWuD,GAAAA,CAAW,iBAAkBzC,EAAMd,UAAY,WAAYc,EAAMT,WAC5ER,MAAOiB,EAAMjB,MACb,aAAYiB,EAAMd,UAJtB,WAMI,cAAGA,UAAU,uDACZc,EAAMjB,QANFyD,EAAME,mBAY3B,iBAAKxD,UAAU,yBAAf,WACI,eAAIA,UAAU,cAAd,6BAEA,gBAAIA,UAAU,OAAd,WACI,eAAIA,UAAU,kBAAd,uIAIA,eAAIA,UAAU,kBAAd,mLAIA,eAAIA,UAAU,kBAAd,gJC7BdyD,EAAW,WACb,MCFW,WAIX,OAA+BC,EAAAA,EAAAA,MAA/B,eAAOpD,EAAP,KAAiB2B,EAAjB,KAAuB0B,EAAvB,KACMC,EAAe,WACjBD,IACAE,EAAa,IACbC,EAAY,KAEVC,EAAc,kBAAM9B,KAC1B,GAAoCpB,EAAAA,EAAAA,WAAkB,GAAtD,eAAOL,EAAP,KAAmBwD,EAAnB,KAKA,GAA4BnD,EAAAA,EAAAA,WAAQ,OAAmBjB,IAAvD,eAAO/B,EAAP,KAAeoG,EAAf,KACA,GAAkCpD,EAAAA,EAAAA,UAAqB,IAAvD,eAAOJ,EAAP,KAAkBoD,EAAlB,KACA,GAAgChD,EAAAA,EAAAA,UAAuB,IAAvD,eAAOqD,EAAP,KAAiBJ,EAAjB,KAiGA,OA/FAK,EAAAA,EAAAA,YAAU,WAEN,IAAIC,EAAcC,SAASC,eAAe,mBAC1C,IAAIC,EAAAA,GAAUH,EAAc,CACxBI,aAAc,sBAEnB,IAyFI,CACHlE,OAAAA,EACAyD,YAAAA,EACAH,aAAAA,EACApD,WAAAA,EACAC,UAAAA,EACA5C,OAAAA,EACAJ,YAzFgB,SAAC+B,GACjBsE,EAAYtE,GACZuE,IACAC,GAAc,IAuFdtG,aAnFiB,SAAC8B,GAClB,IAAMsB,EAAQ,CACVhD,GAAI2G,OAAOjF,EAAIsB,MAAMhD,IACrB+B,MAAOL,EAAIsB,MAAMjB,MACjBG,UAAWR,EAAIsB,MAAMyC,WAAW,IAEpCM,EAAa/C,GACbiD,IACAC,GAAc,IA4EdrG,OAxEW,SAAC6B,GACZ,IAAMkF,EAAgBlF,EAChBK,EAAQ6E,EAAcC,UAAU9E,MACtC,GAAa,MAATA,OACG,CAAC,IAAD,EACC+E,EAAW,CACX9G,GAAI2G,OAAO5G,EAAOgH,OAAS,GAC3BhF,MAAOA,EACPC,MAAO4E,EAAgBA,EAAcI,QAAU,IAAI/E,KACnDC,UAAS,UAAE0E,EAAcC,UAAUI,WAAWC,aAAa,qBAAlD,aAAE,EAA+DhC,OAExEiC,GAAc,OAAOpH,GAC3BoH,EAAeC,KAAKN,GAEpBX,EAAUgB,KA2DdrH,YArBgB,SAAC4B,GACjB,IAAMyF,GAAc,OAAOpH,GACrBsH,EAAMF,EAAeG,WAAU,SAACC,GAAD,OAAOA,EAAC,KAAWZ,OAAOjF,EAAIsB,MAAMhD,OACzEmH,EAAeE,GAAf,MAA+B3F,EAAIsB,MAAMjB,MACzCoF,EAAeE,GAAf,UAAmC3F,EAAIsB,MAAMyC,WAC7C0B,EAAeE,GAAf,MAA+B3F,EAAIsB,MAAMhB,MACzCmF,EAAeE,GAAf,IAA6B3F,EAAIsB,MAAMX,IACvC8D,EAAUgB,GACVjB,GAAc,IAcdrD,cAzCkB,SAACmB,GACnB,IAAMmD,GAAc,OAAOpH,GACrBsH,EAAMF,EAAeG,WAAU,SAACC,GAAD,OAAOA,EAAC,KAAW5E,EAAU3C,MAClEmH,EAAeE,GAAf,MAA+BrD,EAAKjC,MACpCoF,EAAeE,GAAf,UAAmCrD,EAAK9B,UACxCiE,EAAUgB,GACVrB,KAoCAlD,cAhCkB,WAClB,IAAIuE,GAAc,OAAOpH,GACnBsH,EAAMF,EAAeG,WAAU,SAACC,GAAD,OAAOA,EAAC,KAAW5E,EAAU3C,MAClEmH,EAAeK,OAAOH,EAAK,GAC3BlB,EAAUgB,GACVrB,KA4BAhD,WAzDe,SAACkB,GAChB,IAAImD,GAAc,OAAOpH,GACnBiD,EAAQ,CACVhD,GAAI2G,OAAOQ,EAAeJ,OAAS,GACnChF,MAAOiC,EAAKjC,MACZC,MAAwC,IAAjCyF,OAAOC,KAAKtB,GAAUW,OAAeX,EAASuB,KAAO,IAAI1F,KAChEC,UAAW8B,EAAK9B,WAEpBiF,EAAc,kBAAOA,GAAP,CAAuBnE,IACrCmD,EAAUgB,GACVrB,MDjEA8B,GAbApF,EADJ,EACIA,OACAyD,EAFJ,EAEIA,YACAH,EAHJ,EAGIA,aACApD,EAJJ,EAIIA,WACAC,EALJ,EAKIA,UACA5C,EANJ,EAMIA,OACAJ,EAPJ,EAOIA,YACAC,EARJ,EAQIA,aACAC,EATJ,EASIA,OACAC,EAVJ,EAUIA,YACA+C,EAXJ,EAWIA,cACAD,EAZJ,EAYIA,cACAE,EAbJ,EAaIA,WAGJ,OACI,iCACI,SAAC,KAAD,CACI+E,gBAAiB,CACb,CAAE9C,MAAO,OAAQ+C,KAAM,kBACvB,CAAE/C,MAAO,WAAY+C,KAAM,iBAAkBC,QAAQ,IAEzDhG,MAAO,cAGX,SAAC4C,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,WACI,SAACoD,EAAA,EAAD,WACI,SAACA,EAAA,OAAD,WACI,UAACrD,EAAA,EAAD,YACI,UAACC,EAAA,EAAD,CAAKqD,GAAI,EAAT,WACI,gBAAK/F,UAAU,SAAf,UAEI,UAACkD,EAAA,EAAD,CACIlD,UAAU,gCACVlC,GAAG,gBACHsF,QAASW,EAHb,WAKI,cAAG/D,UAAU,gCALjB,0BASJ,SAAC,EAAD,QAEJ,SAAC0C,EAAA,EAAD,CAAKqD,GAAI,EAAT,UAEI,SAAC,EAAD,CACItI,YAAaA,EACbC,aAAcA,EACdC,OAAQA,EACRC,YAAaA,EACbC,OAAQA,iBAUnCyC,GACG,SAAC,EAAD,CACIA,OAAQA,EACRC,QAASqD,EACTpD,WAAYA,EACZC,UAAWA,EACXE,cAAeA,EACfD,cAAeA,EACfE,WAAYA,IAEhB","sources":["pages/apps/Calendar/FullCalendarWidget.tsx","pages/apps/Calendar/data.ts","pages/apps/Calendar/AddEditEvent.tsx","pages/apps/Calendar/hooks/useAddEditEvent.ts","pages/apps/Calendar/SidePanel.tsx","pages/apps/Calendar/Calender.tsx","pages/apps/Calendar/hooks/useCalendar.ts"],"sourcesContent":["import FullCalendar, { EventClickArg, EventDropArg } from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin, { DateClickArg, DropArg } from '@fullcalendar/interaction';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport BootstrapTheme from '@fullcalendar/bootstrap';\r\nimport { EventInput } from '@fullcalendar/core';\r\n\r\ntype FullCalendarWidgetProps = {\r\n    onDateClick: (value: DateClickArg) => void;\r\n    onEventClick: (value: EventClickArg) => void;\r\n    onEventDrop: (value: EventDropArg) => void;\r\n    onDrop: (value: DropArg) => void;\r\n    events: Array<EventInput>;\r\n};\r\n\r\nconst FullCalendarWidget = ({ onDateClick, onEventClick, onDrop, onEventDrop, events }: FullCalendarWidgetProps) => {\r\n    return (\r\n        <>\r\n            {/* full calendar control */}\r\n            <div id=\"calendar\">\r\n                <FullCalendar\r\n                    initialView=\"dayGridMonth\"\r\n                    plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin, BootstrapTheme]}\r\n                    handleWindowResize={true}\r\n                    themeSystem=\"bootstrap\"\r\n                    buttonText={{\r\n                        today: 'Today',\r\n                        month: 'Month',\r\n                        week: 'Week',\r\n                        day: 'Day',\r\n                        list: 'List',\r\n                        prev: 'Prev',\r\n                        next: 'Next',\r\n                    }}\r\n                    headerToolbar={{\r\n                        left: 'prev,next today',\r\n                        center: 'title',\r\n                        right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth',\r\n                    }}\r\n                    editable={true}\r\n                    selectable={true}\r\n                    droppable={true}\r\n                    events={events}\r\n                    dateClick={(arg: DateClickArg) => onDateClick(arg)}\r\n                    eventClick={(arg: EventClickArg) => onEventClick(arg)}\r\n                    drop={(arg: DropArg) => onDrop(arg)}\r\n                    eventDrop={(arg: EventDropArg) => onEventDrop(arg)}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FullCalendarWidget;\r\n","import { EventInput } from '@fullcalendar/react';\r\n\r\nconst defaultEvents: EventInput[] = [\r\n    {\r\n        id: '1',\r\n        title: 'Interview - Backend Engineer',\r\n        start: new Date(),\r\n        className: 'bg-success',\r\n    },\r\n    {\r\n        id: '2',\r\n        title: 'Phone Screen - Frontend Engineer',\r\n        start: new Date().setDate(new Date().getDate() + 2),\r\n        className: 'bg-info',\r\n    },\r\n    {\r\n        id: '3',\r\n        title: 'Meeting with John Deo',\r\n        start: new Date().setDate(new Date().getDate() + 2),\r\n        end: new Date().setDate(new Date().getDate() + 4),\r\n        className: 'bg-warning',\r\n    },\r\n    {\r\n        id: '4',\r\n        title: 'Buy a Theme',\r\n        start: new Date().setDate(new Date().getDate() + 4),\r\n        end: new Date().setDate(new Date().getDate() + 5),\r\n        className: 'bg-primary',\r\n    },\r\n];\r\n\r\n// external events\r\nconst externalEvents = [\r\n    {\r\n        id: 1,\r\n        textClass: 'text-success',\r\n        className: 'bg-success',\r\n        title: 'New Theme Release',\r\n    },\r\n    {\r\n        id: 2,\r\n        textClass: 'text-info',\r\n        className: 'bg-info',\r\n        title: 'My Event',\r\n    },\r\n    {\r\n        id: 3,\r\n        textClass: 'text-warning',\r\n        className: 'bg-warning',\r\n        title: 'Meet manager',\r\n    },\r\n    {\r\n        id: 4,\r\n        textClass: 'text-danger',\r\n        className: 'bg-danger',\r\n        title: 'Create New theme',\r\n    },\r\n];\r\n\r\nexport { defaultEvents, externalEvents };\r\n","import { Modal, Row, Col, Button } from 'react-bootstrap';\r\nimport { EventInput } from '@fullcalendar/react';\r\nimport { FormInput } from 'components';\r\nimport { Event } from './types';\r\nimport { useAddEditEvent } from './hooks';\r\n\r\ntype AddEditEventProps = {\r\n    isOpen: boolean;\r\n    onClose: () => void;\r\n    isEditable: boolean;\r\n    eventData: EventInput;\r\n    onRemoveEvent: () => void;\r\n    onUpdateEvent: (value: Event) => void;\r\n    onAddEvent: (value: Event) => void;\r\n};\r\n\r\nconst AddEditEvent = ({\r\n    isOpen,\r\n    onClose,\r\n    isEditable,\r\n    eventData,\r\n    onRemoveEvent,\r\n    onUpdateEvent,\r\n    onAddEvent,\r\n}: AddEditEventProps) => {\r\n    const { handleSubmit, register, control, errors, onSubmitEvent } = useAddEditEvent(\r\n        eventData,\r\n        isEditable,\r\n        onUpdateEvent,\r\n        onAddEvent\r\n    );\r\n\r\n    return (\r\n        <Modal show={isOpen} onHide={onClose} backdrop=\"static\" keyboard={false}>\r\n            <Modal.Header className=\"pb-2 px-4 border-bottom-0\" closeButton>\r\n                <Modal.Title id=\"modal-title\">\r\n                    <h5> {isEditable ? 'Edit Event' : 'Add New Event'} </h5>\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"px-4 pb-4 pt-0\">\r\n                <form noValidate name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(onSubmitEvent)}>\r\n                    <Row>\r\n                        <Col sm={12}>\r\n                            <FormInput\r\n                                type=\"text\"\r\n                                label=\"Event Name\"\r\n                                name=\"title\"\r\n                                placeholder=\"Insert Event Name\"\r\n                                containerClass={'mb-3'}\r\n                                register={register}\r\n                                key=\"title\"\r\n                                errors={errors}\r\n                                control={control}\r\n                            />\r\n                        </Col>\r\n                        <Col sm={12}>\r\n                            <FormInput\r\n                                type=\"select\"\r\n                                label=\"Category\"\r\n                                name=\"className\"\r\n                                containerClass={'mb-3'}\r\n                                register={register}\r\n                                key=\"className\"\r\n                                errors={errors}\r\n                                control={control}\r\n                            >\r\n                                <option value=\"bg-danger\">Danger</option>\r\n                                <option value=\"bg-success\">Success</option>\r\n                                <option value=\"bg-primary\">Primary</option>\r\n                                <option value=\"bg-info\">Info</option>\r\n                                <option value=\"bg-dark\">Dark</option>\r\n                                <option value=\"bg-warning\">Warning</option>\r\n                            </FormInput>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col xs={4}>\r\n                            {isEditable ? (\r\n                                <Button variant=\"danger\" onClick={onRemoveEvent}>\r\n                                    Delete\r\n                                </Button>\r\n                            ) : null}\r\n                        </Col>\r\n                        <Col xs={8} className=\"text-end\">\r\n                            <Button className=\"btn btn-light me-1\" onClick={onClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"success\" type=\"submit\" className=\"btn btn-success\">\r\n                                Save\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddEditEvent;\r\n","import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { EventInput } from '@fullcalendar/react';\r\nimport { Event } from '../types';\r\n\r\nexport default function useAddEditEvent(\r\n    eventData: EventInput | undefined,\r\n    isEditable: boolean,\r\n    onUpdateEvent: (value: Event) => void,\r\n    onAddEvent: (value: Event) => void\r\n) {\r\n    // event state\r\n    const [event] = useState<Event>({\r\n        title: eventData?.title || '',\r\n        className: eventData?.className || '',\r\n    });\r\n\r\n    /*\r\n     * form validation schema\r\n     */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            title: yup.string().required('Please enter event name'),\r\n            className: yup.string().required('Please select category'),\r\n        })\r\n    );\r\n\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ defaultValues: event, resolver: schemaResolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    /*\r\n     * handle form submission\r\n     */\r\n    const onSubmitEvent = (data: Event) => {\r\n        isEditable ? onUpdateEvent(data) : onAddEvent(data);\r\n    };\r\n\r\n    return {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        errors,\r\n        onSubmitEvent,\r\n    };\r\n}\r\n","import classNames from 'classnames';\r\nimport { externalEvents } from './data';\r\n\r\nconst SidePanel = () => {\r\n    return (\r\n        <>\r\n            <div id=\"external-events\" className=\"m-t-20\">\r\n                <br />\r\n                <p className=\"text-muted\">Drag and drop your event or click in the calendar</p>\r\n                {/* external events */}\r\n                {(externalEvents || []).map((event, index) => {\r\n                    return (\r\n                        <div\r\n                            key={index.toString()}\r\n                            className={classNames('external-event', event.className + '-lighten', event.textClass)}\r\n                            title={event.title}\r\n                            data-class={event.className}\r\n                        >\r\n                            <i className=\"mdi mdi-checkbox-blank-circle me-2 vertical-middle\"></i>\r\n                            {event.title}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n\r\n            <div className=\"mt-5 d-none d-xl-block\">\r\n                <h5 className=\"text-center\">How It Works ?</h5>\r\n\r\n                <ul className=\"ps-3\">\r\n                    <li className=\"text-muted mb-3\">\r\n                        It has survived not only five centuries, but also the leap into electronic typesetting,\r\n                        remaining essentially unchanged.\r\n                    </li>\r\n                    <li className=\"text-muted mb-3\">\r\n                        Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of\r\n                        the more obscure Latin words, consectetur, from a Lorem Ipsum passage.\r\n                    </li>\r\n                    <li className=\"text-muted mb-3\">\r\n                        It has survived not only five centuries, but also the leap into electronic typesetting,\r\n                        remaining essentially unchanged.\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SidePanel;\r\n","import { Row, Col, Card, Button } from 'react-bootstrap';\r\nimport '@fullcalendar/react';\r\nimport { PageTitle } from 'components';\r\nimport FullCalendarWidget from './FullCalendarWidget';\r\nimport AddEditEvent from './AddEditEvent';\r\nimport { useCalendar } from './hooks';\r\nimport SidePanel from './SidePanel';\r\n\r\nconst Calendar = () => {\r\n    const {\r\n        isOpen,\r\n        onOpenModal,\r\n        onCloseModal,\r\n        isEditable,\r\n        eventData,\r\n        events,\r\n        onDateClick,\r\n        onEventClick,\r\n        onDrop,\r\n        onEventDrop,\r\n        onUpdateEvent,\r\n        onRemoveEvent,\r\n        onAddEvent,\r\n    } = useCalendar();\r\n\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Apps', path: '/apps/calendar' },\r\n                    { label: 'Calendar', path: '/apps/calendar', active: true },\r\n                ]}\r\n                title={'Calendar'}\r\n            />\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Row>\r\n                                <Col xl={3}>\r\n                                    <div className=\"d-grid\">\r\n                                        {/* add events */}\r\n                                        <Button\r\n                                            className=\"btn btn-lg font-16 btn-danger\"\r\n                                            id=\"btn-new-event\"\r\n                                            onClick={onOpenModal}\r\n                                        >\r\n                                            <i className=\"mdi mdi-plus-circle-outline\"></i> Create New Event\r\n                                        </Button>\r\n                                    </div>\r\n\r\n                                    <SidePanel />\r\n                                </Col>\r\n                                <Col xl={9}>\r\n                                    {/* fullcalendar control */}\r\n                                    <FullCalendarWidget\r\n                                        onDateClick={onDateClick}\r\n                                        onEventClick={onEventClick}\r\n                                        onDrop={onDrop}\r\n                                        onEventDrop={onEventDrop}\r\n                                        events={events}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* add new event modal */}\r\n            {isOpen ? (\r\n                <AddEditEvent\r\n                    isOpen={isOpen}\r\n                    onClose={onCloseModal}\r\n                    isEditable={isEditable}\r\n                    eventData={eventData}\r\n                    onUpdateEvent={onUpdateEvent}\r\n                    onRemoveEvent={onRemoveEvent}\r\n                    onAddEvent={onAddEvent}\r\n                />\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport { Calendar };\r\n","import { useEffect, useState } from 'react';\r\nimport { DateClickArg, Draggable, DropArg } from '@fullcalendar/interaction';\r\nimport { DateInput, EventClickArg, EventDropArg, EventInput } from '@fullcalendar/react';\r\nimport { useToggle } from 'hooks';\r\nimport { Event } from '../types';\r\nimport { defaultEvents } from '../data';\r\n\r\nexport default function useCalendar() {\r\n    /*\r\n     * modal handling\r\n     */\r\n    const [isOpen, , show, hide] = useToggle();\r\n    const onCloseModal = () => {\r\n        hide();\r\n        setEventData({});\r\n        setDateInfo({} as DateClickArg);\r\n    };\r\n    const onOpenModal = () => show();\r\n    const [isEditable, setIsEditable] = useState<boolean>(false);\r\n\r\n    /*\r\n     * event data\r\n     */\r\n    const [events, setEvents] = useState<EventInput[]>([...defaultEvents]);\r\n    const [eventData, setEventData] = useState<EventInput>({});\r\n    const [dateInfo, setDateInfo] = useState<DateClickArg>({} as DateClickArg);\r\n\r\n    useEffect(() => {\r\n        // create dragable events\r\n        let draggableEl = document.getElementById('external-events');\r\n        new Draggable(draggableEl!, {\r\n            itemSelector: '.external-event',\r\n        });\r\n    }, []);\r\n\r\n    /*\r\n    calendar events\r\n    */\r\n\r\n    // on date click\r\n    const onDateClick = (arg: DateClickArg) => {\r\n        setDateInfo(arg);\r\n        onOpenModal();\r\n        setIsEditable(false);\r\n    };\r\n\r\n    // on event click\r\n    const onEventClick = (arg: EventClickArg) => {\r\n        const event = {\r\n            id: String(arg.event.id),\r\n            title: arg.event.title,\r\n            className: arg.event.classNames[0],\r\n        };\r\n        setEventData(event);\r\n        onOpenModal();\r\n        setIsEditable(true);\r\n    };\r\n\r\n    // on drop\r\n    const onDrop = (arg: DropArg) => {\r\n        const dropEventData = arg;\r\n        const title = dropEventData.draggedEl.title;\r\n        if (title == null) {\r\n        } else {\r\n            let newEvent = {\r\n                id: String(events.length + 1),\r\n                title: title,\r\n                start: dropEventData ? dropEventData.dateStr : new Date(),\r\n                className: dropEventData.draggedEl.attributes.getNamedItem('data-class')?.value,\r\n            };\r\n            const modifiedEvents = [...events];\r\n            modifiedEvents.push(newEvent);\r\n\r\n            setEvents(modifiedEvents);\r\n        }\r\n    };\r\n\r\n    // on add event\r\n    const onAddEvent = (data: Event) => {\r\n        let modifiedEvents = [...events];\r\n        const event = {\r\n            id: String(modifiedEvents.length + 1),\r\n            title: data.title,\r\n            start: Object.keys(dateInfo).length !== 0 ? dateInfo.date : new Date(),\r\n            className: data.className,\r\n        };\r\n        modifiedEvents = [...modifiedEvents, event];\r\n        setEvents(modifiedEvents);\r\n        onCloseModal();\r\n    };\r\n\r\n    //  on update event\r\n    const onUpdateEvent = (data: Event) => {\r\n        const modifiedEvents = [...events];\r\n        const idx = modifiedEvents.findIndex((e) => e['id'] === eventData.id);\r\n        modifiedEvents[idx]['title'] = data.title;\r\n        modifiedEvents[idx]['className'] = data.className;\r\n        setEvents(modifiedEvents);\r\n        onCloseModal();\r\n    };\r\n\r\n    // on remove event\r\n    const onRemoveEvent = () => {\r\n        var modifiedEvents = [...events];\r\n        const idx = modifiedEvents.findIndex((e) => e['id'] === eventData.id);\r\n        modifiedEvents.splice(idx, 1);\r\n        setEvents(modifiedEvents);\r\n        onCloseModal();\r\n    };\r\n\r\n    // on event drop\r\n    const onEventDrop = (arg: EventDropArg) => {\r\n        const modifiedEvents = [...events];\r\n        const idx = modifiedEvents.findIndex((e) => e['id'] === String(arg.event.id!));\r\n        modifiedEvents[idx]['title'] = arg.event.title;\r\n        modifiedEvents[idx]['className'] = arg.event.classNames;\r\n        modifiedEvents[idx]['start'] = arg.event.start as DateInput;\r\n        modifiedEvents[idx]['end'] = arg.event.end as DateInput;\r\n        setEvents(modifiedEvents);\r\n        setIsEditable(false);\r\n    };\r\n\r\n    return {\r\n        isOpen,\r\n        onOpenModal,\r\n        onCloseModal,\r\n        isEditable,\r\n        eventData,\r\n        events,\r\n        onDateClick,\r\n        onEventClick,\r\n        onDrop,\r\n        onEventDrop,\r\n        onUpdateEvent,\r\n        onRemoveEvent,\r\n        onAddEvent,\r\n    };\r\n}\r\n"],"names":["onDateClick","onEventClick","onDrop","onEventDrop","events","id","initialView","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","BootstrapTheme","handleWindowResize","themeSystem","buttonText","today","month","week","day","list","prev","next","headerToolbar","left","center","right","editable","selectable","droppable","dateClick","arg","eventClick","drop","eventDrop","defaultEvents","title","start","Date","className","setDate","getDate","end","externalEvents","textClass","isOpen","onClose","isEditable","eventData","onRemoveEvent","onUpdateEvent","onAddEvent","useState","event","schemaResolver","yupResolver","yup","shape","required","methods","useForm","defaultValues","resolver","handleSubmit","register","control","errors","formState","onSubmitEvent","data","useAddEditEvent","Modal","show","onHide","backdrop","keyboard","closeButton","noValidate","name","onSubmit","Row","Col","sm","type","label","placeholder","containerClass","value","xs","Button","variant","onClick","map","index","classNames","toString","Calendar","useToggle","hide","onCloseModal","setEventData","setDateInfo","onOpenModal","setIsEditable","setEvents","dateInfo","useEffect","draggableEl","document","getElementById","Draggable","itemSelector","String","dropEventData","draggedEl","newEvent","length","dateStr","attributes","getNamedItem","modifiedEvents","push","idx","findIndex","e","splice","Object","keys","date","useCalendar","breadCrumbItems","path","active","Card","xl"],"sourceRoot":""}